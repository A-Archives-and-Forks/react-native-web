{"code":"_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[137],{\"0wNz\":function(n,w){},\"1KuG\":function(n,w,_){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/view/examples/PointerEventsExample\",function(){return _(\"0wNz\")}])}},[[\"1KuG\",0]]]);","map":{"version":3,"sources":["static/chunks/pages/view/examples/PointerEventsExample-0851a126fabeb92c87dd.js"],"names":["_N_E","window","push","0wNz","module","exports","1KuG","__webpack_require__","__NEXT_P"],"mappings":"AAAAA,MACCC,OAAyB,iBAAIA,OAAyB,kBAAK,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtEC,OACA,SAAUC,EAAQC,KAiOlBC,OACA,SAAUF,EAAQC,EAASE,IAG1BN,OAAOO,SAAWP,OAAOO,UAAY,IAAIN,KAAK,CAC7C,sCACA,WACE,OAAOK,EAAoB,aAOnC,CAAC,CAAC,OAAO"},"name":"static/chunks/pages/view/examples/PointerEventsExample-0851a126fabeb92c87dd.js","input":"_N_E =\n(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[137],{\n\n/***/ \"0wNz\":\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @providesModule PointerEventsExample\n */\n\n/*\n'use strict';\n\nvar React = require('react');\nvar ReactNative = require('react-native');\nvar { StyleSheet, Text, View } = ReactNative;\n\nclass ExampleBox extends React.Component<$FlowFixMeProps, $FlowFixMeState> {\n  state = {\n    log: []\n  };\n\n  handleLog = msg => {\n    this.state.log = this.state.log.concat([msg]);\n  };\n\n  flushReactChanges = () => {\n    this.forceUpdate();\n  };\n\n  // Capture phase of bubbling to append separator before any of the bubbling happens\n  handleTouchCapture = () => {\n    this.state.log = this.state.log.concat(['---']);\n  };\n\n  render() {\n    return (\n      <View>\n        <View onTouchEndCapture={this.handleTouchCapture} onTouchStart={this.flushReactChanges}>\n          <this.props.Component onLog={this.handleLog} />\n        </View>\n        <View style={styles.logBox}>\n          <DemoText style={styles.logText}>{this.state.log.join('\\n')}</DemoText>\n        </View>\n      </View>\n    );\n  }\n}\n\nclass NoneExample extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View onTouchStart={() => this.props.onLog('A unspecified touched')} style={styles.box}>\n        <DemoText style={styles.text}>A: unspecified</DemoText>\n        <View\n          pointerEvents=\"none\"\n          onTouchStart={() => this.props.onLog('B none touched')}\n          style={[styles.box, styles.boxPassedThrough]}\n        >\n          <DemoText style={[styles.text, styles.textPassedThrough]}>B: none</DemoText>\n          <View\n            onTouchStart={() => this.props.onLog('C unspecified touched')}\n            style={[styles.box, styles.boxPassedThrough]}\n          >\n            <DemoText style={[styles.text, styles.textPassedThrough]}>C: unspecified</DemoText>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\n// Special demo text that makes itself untouchable so that it doesn't destroy\n// the experiment and confuse the output.\nclass DemoText extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View pointerEvents=\"none\">\n        <Text style={this.props.style}>{this.props.children}</Text>\n      </View>\n    );\n  }\n}\n\nclass BoxNoneExample extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View onTouchStart={() => this.props.onLog('A unspecified touched')} style={styles.box}>\n        <DemoText style={styles.text}>A: unspecified</DemoText>\n        <View\n          pointerEvents=\"box-none\"\n          onTouchStart={() => this.props.onLog('B box-none touched')}\n          style={[styles.box, styles.boxPassedThrough]}\n        >\n          <DemoText style={[styles.text, styles.textPassedThrough]}>B: box-none</DemoText>\n          <View onTouchStart={() => this.props.onLog('C unspecified touched')} style={styles.box}>\n            <DemoText style={styles.text}>C: unspecified</DemoText>\n          </View>\n          <View\n            pointerEvents=\"auto\"\n            onTouchStart={() => this.props.onLog('C explicitly unspecified touched')}\n            style={[styles.box]}\n          >\n            <DemoText style={[styles.text]}>C: explicitly unspecified</DemoText>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nclass BoxOnlyExample extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View onTouchStart={() => this.props.onLog('A unspecified touched')} style={styles.box}>\n        <DemoText style={styles.text}>A: unspecified</DemoText>\n        <View\n          pointerEvents=\"box-only\"\n          onTouchStart={() => this.props.onLog('B box-only touched')}\n          style={styles.box}\n        >\n          <DemoText style={styles.text}>B: box-only</DemoText>\n          <View\n            onTouchStart={() => this.props.onLog('C unspecified touched')}\n            style={[styles.box, styles.boxPassedThrough]}\n          >\n            <DemoText style={[styles.text, styles.textPassedThrough]}>C: unspecified</DemoText>\n          </View>\n          <View\n            pointerEvents=\"auto\"\n            onTouchStart={() => this.props.onLog('C explicitly unspecified touched')}\n            style={[styles.box, styles.boxPassedThrough]}\n          >\n            <DemoText style={[styles.text, styles.textPassedThrough]}>\n              C: explicitly unspecified\n            </DemoText>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\ntype ExampleClass = {\n  Component: React.ComponentType<any>,\n  title: string,\n  description: string\n};\n\nvar exampleClasses: Array<ExampleClass> = [\n  {\n    Component: NoneExample,\n    title: '`none`',\n    description:\n      '`none` causes touch events on the container and its child components to pass through to the parent container.'\n  },\n  {\n    Component: BoxNoneExample,\n    title: '`box-none`',\n    description:\n      '`box-none` causes touch events on the container to pass through and will only detect touch events on its child components.'\n  },\n  {\n    Component: BoxOnlyExample,\n    title: '`box-only`',\n    description:\n      \"`box-only` causes touch events on the container's child components to pass through and will only detect touch events on the container itself.\"\n  }\n];\n\nvar infoToExample = info => {\n  return {\n    title: info.title,\n    description: info.description,\n    render: function() {\n      return <ExampleBox key={info.title} Component={info.Component} />;\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 10,\n    color: '#5577cc'\n  },\n  textPassedThrough: {\n    color: '#88aadd'\n  },\n  box: {\n    backgroundColor: '#aaccff',\n    borderWidth: 1,\n    borderColor: '#7799cc',\n    padding: 10,\n    margin: 5\n  },\n  boxPassedThrough: {\n    borderColor: '#99bbee'\n  },\n  logText: {\n    fontSize: 9\n  },\n  logBox: {\n    padding: 20,\n    margin: 10,\n    borderWidth: 0.5,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  },\n  bottomSpacer: {\n    marginBottom: 100\n  }\n});\n\nexports.framework = 'React';\nexports.title = 'Pointer Events';\nexports.description =\n  'Demonstrates the use of the pointerEvents prop of a ' +\n  'View to control how touches should be handled.';\nexports.examples = exampleClasses.map(infoToExample);\n*/\n\n/***/ }),\n\n/***/ \"1KuG\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/view/examples/PointerEventsExample\",\n        function () {\n          return __webpack_require__(\"0wNz\");\n        }\n      ]);\n    \n\n/***/ })\n\n},[[\"1KuG\",0]]]);","inputSourceMap":{"version":3,"sources":["/Users/necolas/OpenSource/github/necolas/react-native-web/node_modules/next/dist/build/webpack/loaders/next-babel-loader.js??ref--4!/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/view/examples/PointerEventsExample.js","/Users/necolas/OpenSource/github/necolas/react-native-web/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fview%2Fexamples%2FPointerEventsExample&absolutePagePath=private-next-pages%2Fview%2Fexamples%2FPointerEventsExample.js!"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK,yBAAyB;;AAE9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,wBAAwB,eAAe,uBAAuB;AAC/F,uCAAuC,eAAe;AACtD;AACA,qBAAqB,cAAc;AACnC,2BAA2B,eAAe,EAAE,0BAA0B;AACtE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,gDAAgD,QAAQ,WAAW;AAC7F,yBAAyB,YAAY;AACrC;AACA;AACA,wBAAwB;AACxB,iBAAiB;AACjB;AACA,2BAA2B,wCAAwC;AACnE;AACA,0BAA0B;AAC1B,mBAAmB;AACnB;AACA,6BAA6B,wCAAwC;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB,EAAE,oBAAoB;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,gDAAgD,QAAQ,WAAW;AAC7F,yBAAyB,YAAY;AACrC;AACA;AACA,wBAAwB;AACxB,iBAAiB;AACjB;AACA,2BAA2B,wCAAwC;AACnE,8BAA8B,gDAAgD,QAAQ,WAAW;AACjG,6BAA6B,YAAY;AACzC;AACA;AACA;AACA,0BAA0B;AAC1B,mBAAmB;AACnB;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,gDAAgD,QAAQ,WAAW;AAC7F,yBAAyB,YAAY;AACrC;AACA;AACA,wBAAwB;AACxB,iBAAiB;AACjB;AACA,2BAA2B,YAAY;AACvC;AACA,0BAA0B;AAC1B,mBAAmB;AACnB;AACA,6BAA6B,wCAAwC;AACrE;AACA;AACA;AACA,0BAA0B;AAC1B,mBAAmB;AACnB;AACA,6BAA6B,wCAAwC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW,YAAY,eAAe;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;AC1NA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,MAA0D;AACnF;AACA","file":"x","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @providesModule PointerEventsExample\n */\n\n/*\n'use strict';\n\nvar React = require('react');\nvar ReactNative = require('react-native');\nvar { StyleSheet, Text, View } = ReactNative;\n\nclass ExampleBox extends React.Component<$FlowFixMeProps, $FlowFixMeState> {\n  state = {\n    log: []\n  };\n\n  handleLog = msg => {\n    this.state.log = this.state.log.concat([msg]);\n  };\n\n  flushReactChanges = () => {\n    this.forceUpdate();\n  };\n\n  // Capture phase of bubbling to append separator before any of the bubbling happens\n  handleTouchCapture = () => {\n    this.state.log = this.state.log.concat(['---']);\n  };\n\n  render() {\n    return (\n      <View>\n        <View onTouchEndCapture={this.handleTouchCapture} onTouchStart={this.flushReactChanges}>\n          <this.props.Component onLog={this.handleLog} />\n        </View>\n        <View style={styles.logBox}>\n          <DemoText style={styles.logText}>{this.state.log.join('\\n')}</DemoText>\n        </View>\n      </View>\n    );\n  }\n}\n\nclass NoneExample extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View onTouchStart={() => this.props.onLog('A unspecified touched')} style={styles.box}>\n        <DemoText style={styles.text}>A: unspecified</DemoText>\n        <View\n          pointerEvents=\"none\"\n          onTouchStart={() => this.props.onLog('B none touched')}\n          style={[styles.box, styles.boxPassedThrough]}\n        >\n          <DemoText style={[styles.text, styles.textPassedThrough]}>B: none</DemoText>\n          <View\n            onTouchStart={() => this.props.onLog('C unspecified touched')}\n            style={[styles.box, styles.boxPassedThrough]}\n          >\n            <DemoText style={[styles.text, styles.textPassedThrough]}>C: unspecified</DemoText>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\n// Special demo text that makes itself untouchable so that it doesn't destroy\n// the experiment and confuse the output.\nclass DemoText extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View pointerEvents=\"none\">\n        <Text style={this.props.style}>{this.props.children}</Text>\n      </View>\n    );\n  }\n}\n\nclass BoxNoneExample extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View onTouchStart={() => this.props.onLog('A unspecified touched')} style={styles.box}>\n        <DemoText style={styles.text}>A: unspecified</DemoText>\n        <View\n          pointerEvents=\"box-none\"\n          onTouchStart={() => this.props.onLog('B box-none touched')}\n          style={[styles.box, styles.boxPassedThrough]}\n        >\n          <DemoText style={[styles.text, styles.textPassedThrough]}>B: box-none</DemoText>\n          <View onTouchStart={() => this.props.onLog('C unspecified touched')} style={styles.box}>\n            <DemoText style={styles.text}>C: unspecified</DemoText>\n          </View>\n          <View\n            pointerEvents=\"auto\"\n            onTouchStart={() => this.props.onLog('C explicitly unspecified touched')}\n            style={[styles.box]}\n          >\n            <DemoText style={[styles.text]}>C: explicitly unspecified</DemoText>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nclass BoxOnlyExample extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <View onTouchStart={() => this.props.onLog('A unspecified touched')} style={styles.box}>\n        <DemoText style={styles.text}>A: unspecified</DemoText>\n        <View\n          pointerEvents=\"box-only\"\n          onTouchStart={() => this.props.onLog('B box-only touched')}\n          style={styles.box}\n        >\n          <DemoText style={styles.text}>B: box-only</DemoText>\n          <View\n            onTouchStart={() => this.props.onLog('C unspecified touched')}\n            style={[styles.box, styles.boxPassedThrough]}\n          >\n            <DemoText style={[styles.text, styles.textPassedThrough]}>C: unspecified</DemoText>\n          </View>\n          <View\n            pointerEvents=\"auto\"\n            onTouchStart={() => this.props.onLog('C explicitly unspecified touched')}\n            style={[styles.box, styles.boxPassedThrough]}\n          >\n            <DemoText style={[styles.text, styles.textPassedThrough]}>\n              C: explicitly unspecified\n            </DemoText>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\ntype ExampleClass = {\n  Component: React.ComponentType<any>,\n  title: string,\n  description: string\n};\n\nvar exampleClasses: Array<ExampleClass> = [\n  {\n    Component: NoneExample,\n    title: '`none`',\n    description:\n      '`none` causes touch events on the container and its child components to pass through to the parent container.'\n  },\n  {\n    Component: BoxNoneExample,\n    title: '`box-none`',\n    description:\n      '`box-none` causes touch events on the container to pass through and will only detect touch events on its child components.'\n  },\n  {\n    Component: BoxOnlyExample,\n    title: '`box-only`',\n    description:\n      \"`box-only` causes touch events on the container's child components to pass through and will only detect touch events on the container itself.\"\n  }\n];\n\nvar infoToExample = info => {\n  return {\n    title: info.title,\n    description: info.description,\n    render: function() {\n      return <ExampleBox key={info.title} Component={info.Component} />;\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 10,\n    color: '#5577cc'\n  },\n  textPassedThrough: {\n    color: '#88aadd'\n  },\n  box: {\n    backgroundColor: '#aaccff',\n    borderWidth: 1,\n    borderColor: '#7799cc',\n    padding: 10,\n    margin: 5\n  },\n  boxPassedThrough: {\n    borderColor: '#99bbee'\n  },\n  logText: {\n    fontSize: 9\n  },\n  logBox: {\n    padding: 20,\n    margin: 10,\n    borderWidth: 0.5,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  },\n  bottomSpacer: {\n    marginBottom: 100\n  }\n});\n\nexports.framework = 'React';\nexports.title = 'Pointer Events';\nexports.description =\n  'Demonstrates the use of the pointerEvents prop of a ' +\n  'View to control how touches should be handled.';\nexports.examples = exampleClasses.map(infoToExample);\n*/","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/view/examples/PointerEventsExample\",\n        function () {\n          return require(\"private-next-pages/view/examples/PointerEventsExample.js\");\n        }\n      ]);\n    "]}}