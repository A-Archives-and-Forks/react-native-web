{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[3],{KwZf:function(e,t,n){\"use strict\";t.__esModule=!0,t.default=void 0;var i=\"DELAY\",o=\"ERROR\",s=\"LONG_PRESS_DETECTED\",r=\"NOT_RESPONDER\",u=\"RESPONDER_ACTIVE_LONG_PRESS_START\",a=\"RESPONDER_ACTIVE_PRESS_START\",l=\"RESPONDER_INACTIVE_PRESS_START\",c=\"RESPONDER_RELEASE\",_=\"RESPONDER_TERMINATED\",E=Object.freeze({NOT_RESPONDER:{DELAY:o,RESPONDER_GRANT:l,RESPONDER_RELEASE:o,RESPONDER_TERMINATED:o,LONG_PRESS_DETECTED:o},RESPONDER_INACTIVE_PRESS_START:{DELAY:a,RESPONDER_GRANT:o,RESPONDER_RELEASE:r,RESPONDER_TERMINATED:r,LONG_PRESS_DETECTED:o},RESPONDER_ACTIVE_PRESS_START:{DELAY:o,RESPONDER_GRANT:o,RESPONDER_RELEASE:r,RESPONDER_TERMINATED:r,LONG_PRESS_DETECTED:u},RESPONDER_ACTIVE_LONG_PRESS_START:{DELAY:o,RESPONDER_GRANT:o,RESPONDER_RELEASE:r,RESPONDER_TERMINATED:r,LONG_PRESS_DETECTED:u},ERROR:{DELAY:r,RESPONDER_GRANT:l,RESPONDER_RELEASE:r,RESPONDER_TERMINATED:r,LONG_PRESS_DETECTED:r}}),R=function(e){return e===a||e===u},T=function(e){return\"button\"===e.getAttribute(\"role\")},P=function(e){return e===l||e===a||e===u},f=function(){function e(e){this._eventHandlers=null,this._isPointerTouch=!1,this._longPressDelayTimeout=null,this._longPressDispatched=!1,this._pressDelayTimeout=null,this._pressOutDelayTimeout=null,this._touchState=r,this.configure(e)}var t=e.prototype;return t.configure=function(e){this._config=e},t.reset=function(){this._cancelLongPressDelayTimeout(),this._cancelPressDelayTimeout(),this._cancelPressOutDelayTimeout()},t.getEventHandlers=function(){return null==this._eventHandlers&&(this._eventHandlers=this._createEventHandlers()),this._eventHandlers},t._createEventHandlers=function(){var e=this,t=function(t,n){t.persist(),e._cancelPressOutDelayTimeout(),e._longPressDispatched=!1,e._responder=t.currentTarget,e._selectionTerminated=!1,e._touchState=r,e._isPointerTouch=\"touchstart\"===t.nativeEvent.type,e._receiveSignal(\"RESPONDER_GRANT\",t);var o=h(e._config.delayPressStart,0,50);!1!==n&&o>0?e._pressDelayTimeout=setTimeout((function(){e._receiveSignal(i,t)}),o):e._receiveSignal(i,t);var s=h(e._config.delayLongPress,10,450);e._longPressDelayTimeout=setTimeout((function(){e._handleLongPress(t)}),s+o)},n=function(t){e._receiveSignal(c,t)},o=function t(i){e._touchState!==r&&(n(i),document.removeEventListener(\"keyup\",t))};return{onStartShouldSetResponder:function(t){var n=e._config.disabled;return n&&T(t.currentTarget)&&t.stopPropagation(),null==n||!n},onKeyDown:function(n){(function(e){var t=e.key,n=e.currentTarget.getAttribute(\"role\"),i=\" \"===t||\"Spacebar\"===t;return!e.repeat&&(\"Enter\"===t||i&&(\"button\"===n||\"menuitem\"===n))})(n)&&(e._touchState===r&&(t(n,!1),document.addEventListener(\"keyup\",o)),n.stopPropagation())},onResponderGrant:function(e){return t(e)},onResponderMove:function(t){null!=e._config.onPressMove&&e._config.onPressMove(t);var n=S(t);if(null!=e._touchActivatePosition){var i=e._touchActivatePosition.pageX-n.pageX,o=e._touchActivatePosition.pageY-n.pageY;Math.hypot(i,o)>10&&e._cancelLongPressDelayTimeout()}},onResponderRelease:function(e){return n(e)},onResponderTerminate:function(t){\"selectionchange\"===t.nativeEvent.type&&(e._selectionTerminated=!0),e._receiveSignal(_,t)},onResponderTerminationRequest:function(t){var n=e._config,i=n.cancelable,o=n.disabled,s=n.onLongPress;return!(!o&&null!=s&&e._isPointerTouch&&\"contextmenu\"===t.nativeEvent.type)&&(null==i||i)},onClick:function(t){var n=e._config,i=n.disabled,o=n.onPress;i?T(t.currentTarget)&&t.stopPropagation():(t.stopPropagation(),e._longPressDispatched||e._selectionTerminated?t.preventDefault():null!=o&&!1===t.ctrlKey&&!1===t.altKey&&o(t))},onContextMenu:function(t){var n=e._config,i=n.disabled,o=n.onLongPress;i?T(t.currentTarget)&&t.stopPropagation():null!=o&&e._isPointerTouch&&!t.defaultPrevented&&(t.preventDefault(),t.stopPropagation())}}},t._receiveSignal=function(e,t){var n=this._touchState,i=null;null!=E[n]&&(i=E[n][e]),null==this._responder&&e===c||(null==i||i===o?console.error(\"PressResponder: Invalid signal \"+e+\" for state \"+n+\" on responder\"):n!==i&&(this._performTransitionSideEffects(n,i,e,t),this._touchState=i))},t._performTransitionSideEffects=function(e,t,n,i){if(function(e){return e===_||e===c}(n)&&(this._isPointerTouch=!1,this._touchActivatePosition=null,this._cancelLongPressDelayTimeout()),P(e)&&n===s){var o=this._config.onLongPress;null!=o&&null==i.nativeEvent.key&&(o(i),this._longPressDispatched=!0)}var r=R(e),a=R(t);if(!r&&a?this._activate(i):r&&!a&&this._deactivate(i),P(e)&&n===c){var l=this._config,E=l.onLongPress;if(null!=l.onPress)null!=E&&e===u||a||r||(this._activate(i),this._deactivate(i))}this._cancelPressDelayTimeout()},t._activate=function(e){var t=this._config,n=t.onPressChange,i=t.onPressStart,o=S(e);this._touchActivatePosition={pageX:o.pageX,pageY:o.pageY},null!=i&&i(e),null!=n&&n(!0)},t._deactivate=function(e){var t=this._config,n=t.onPressChange,i=t.onPressEnd;function o(){null!=i&&i(e),null!=n&&n(!1)}var s=h(this._config.delayPressEnd);s>0?this._pressOutDelayTimeout=setTimeout((function(){o()}),s):o()},t._handleLongPress=function(e){this._touchState!==a&&this._touchState!==u||this._receiveSignal(s,e)},t._cancelLongPressDelayTimeout=function(){null!=this._longPressDelayTimeout&&(clearTimeout(this._longPressDelayTimeout),this._longPressDelayTimeout=null)},t._cancelPressDelayTimeout=function(){null!=this._pressDelayTimeout&&(clearTimeout(this._pressDelayTimeout),this._pressDelayTimeout=null)},t._cancelPressOutDelayTimeout=function(){null!=this._pressOutDelayTimeout&&(clearTimeout(this._pressOutDelayTimeout),this._pressOutDelayTimeout=null)},e}();function h(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=0),Math.max(t,null!==e&&void 0!==e?e:n)}function S(e){var t=e.nativeEvent,n=t.changedTouches,i=t.touches;return null!=i&&i.length>0?i[0]:null!=n&&n.length>0?n[0]:e.nativeEvent}t.default=f,e.exports=t.default},pllh:function(e,t,n){\"use strict\";t.__esModule=!0,t.default=function(e,t){var n=(0,s.useRef)(null);null==n.current&&(n.current=new o.default(t));var i=n.current;return(0,s.useEffect)((function(){i.configure(t)}),[t,i]),(0,s.useEffect)((function(){return function(){i.reset()}}),[i]),(0,s.useDebugValue)(t),i.getEventHandlers()};var i,o=(i=n(\"KwZf\"))&&i.__esModule?i:{default:i},s=n(\"ERkP\");e.exports=t.default}}]);","map":{"version":3,"sources":["static/chunks/82bc8870f6e9c56fad366b797fb709553c7c5e9d.370ec1911bb16fe82eee.js"],"names":["window","push","KwZf","module","exports","__webpack_require__","__esModule","default","DELAY","ERROR","LONG_PRESS_DETECTED","NOT_RESPONDER","RESPONDER_ACTIVE_LONG_PRESS_START","RESPONDER_ACTIVE_PRESS_START","RESPONDER_INACTIVE_PRESS_START","RESPONDER_RELEASE","RESPONDER_TERMINATED","Transitions","Object","freeze","RESPONDER_GRANT","isActiveSignal","signal","isButtonRole","element","getAttribute","isPressStartSignal","PressResponder","config","this","_eventHandlers","_isPointerTouch","_longPressDelayTimeout","_longPressDispatched","_pressDelayTimeout","_pressOutDelayTimeout","_touchState","configure","_proto","prototype","_config","reset","_cancelLongPressDelayTimeout","_cancelPressDelayTimeout","_cancelPressOutDelayTimeout","getEventHandlers","_createEventHandlers","_this","start","event","shouldDelay","persist","_responder","currentTarget","_selectionTerminated","nativeEvent","type","_receiveSignal","delayPressStart","normalizeDelay","setTimeout","delayLongPress","_handleLongPress","end","keyupHandler","document","removeEventListener","onStartShouldSetResponder","disabled","stopPropagation","onKeyDown","key","role","isSpacebar","repeat","isValidKeyPress","addEventListener","onResponderGrant","onResponderMove","onPressMove","touch","getTouchFromResponderEvent","_touchActivatePosition","deltaX","pageX","deltaY","pageY","Math","hypot","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","_this$_config","cancelable","onLongPress","onClick","_this$_config2","onPress","preventDefault","ctrlKey","altKey","onContextMenu","_this$_config3","defaultPrevented","prevState","nextState","console","error","_performTransitionSideEffects","isTerminalSignal","isPrevActive","isNextActive","_activate","_deactivate","_this$_config4","_onLongPress","_this$_config5","onPressChange","onPressStart","_this$_config6","onPressEnd","delayPressEnd","clearTimeout","delay","min","fallback","max","_event$nativeEvent","changedTouches","touches","length","pllh","hostRef","pressResponderRef","_react","useRef","current","_PressResponder","pressResponder","useEffect","useDebugValue","obj"],"mappings":"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"},"name":"static/chunks/82bc8870f6e9c56fad366b797fb709553c7c5e9d.370ec1911bb16fe82eee.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[3],{\n\n/***/ \"KwZf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n\nexports.__esModule = true;\nexports.default = void 0;\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\n\nvar isActiveSignal = function isActiveSignal(signal) {\n  return signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isButtonRole = function isButtonRole(element) {\n  return element.getAttribute('role') === 'button';\n};\n\nvar isPressStartSignal = function isPressStartSignal(signal) {\n  return signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isTerminalSignal = function isTerminalSignal(signal) {\n  return signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\n};\n\nvar isValidKeyPress = function isValidKeyPress(event) {\n  var key = event.key;\n  var target = event.currentTarget;\n  var role = target.getAttribute('role');\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  return !event.repeat && (key === 'Enter' || isSpacebar && (role === 'button' || role === 'menuitem'));\n};\n\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450; // 500 - 50\n\nvar DEFAULT_PRESS_DELAY_MS = 50;\n/**\n * =========================== PressResponder Tutorial ===========================\n *\n * The `PressResponder` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `PressResponder`, do the following:\n *\n *     const pressResponder = new PressResponder(config);\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressResponder.getEventHandlers()} />\n *    );\n *\n * 3. Reset `PressResponder` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressResponder.reset();\n *    }\n *\n * ==================== Implementation Details ====================\n *\n * `PressResponder` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`.\n *  │  │  ┌────────────┐  │  │\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates.\n *  │  └──────────────────┘  │\n *  │       Out Region   o   │\n *  └────────────────────│───┘\n *                       └────── When the press is released outside the `HitRect`,\n *                               the responder is NOT eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_START         ├────────▶ │ PRESS_START       ├────────────▶ │ LONG_PRESS_START  │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onLongPress`. Only when the browser produces a\n * `click` event is `onPress` invoked.\n */\n\nvar PressResponder =\n/*#__PURE__*/\nfunction () {\n  function PressResponder(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n\n  var _proto = PressResponder.prototype;\n\n  _proto.configure = function configure(config) {\n    this._config = config;\n  }\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  ;\n\n  _proto.reset = function reset() {\n    this._cancelLongPressDelayTimeout();\n\n    this._cancelPressDelayTimeout();\n\n    this._cancelPressOutDelayTimeout();\n  }\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  ;\n\n  _proto.getEventHandlers = function getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n\n    return this._eventHandlers;\n  };\n\n  _proto._createEventHandlers = function _createEventHandlers() {\n    var _this = this;\n\n    var start = function start(event, shouldDelay) {\n      event.persist();\n\n      _this._cancelPressOutDelayTimeout();\n\n      _this._longPressDispatched = false;\n      _this._responder = event.currentTarget;\n      _this._selectionTerminated = false;\n      _this._touchState = NOT_RESPONDER;\n      _this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n\n      _this._receiveSignal(RESPONDER_GRANT, event);\n\n      var delayPressStart = normalizeDelay(_this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n\n      if (shouldDelay !== false && delayPressStart > 0) {\n        _this._pressDelayTimeout = setTimeout(function () {\n          _this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        _this._receiveSignal(DELAY, event);\n      }\n\n      var delayLongPress = normalizeDelay(_this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      _this._longPressDelayTimeout = setTimeout(function () {\n        _this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n\n    var end = function end(event) {\n      _this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n\n    var keyupHandler = function keyupHandler(event) {\n      if (_this._touchState !== NOT_RESPONDER) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n      }\n    };\n\n    return {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        var disabled = _this._config.disabled;\n\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n\n        if (disabled == null) {\n          return true;\n        }\n\n        return !disabled;\n      },\n      onKeyDown: function onKeyDown(event) {\n        if (isValidKeyPress(event)) {\n          if (_this._touchState === NOT_RESPONDER) {\n            start(event, false); // Listen to 'keyup' on document to account for situations where\n            // focus is moved to another element during 'keydown'.\n\n            document.addEventListener('keyup', keyupHandler);\n          }\n\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        return start(event);\n      },\n      onResponderMove: function onResponderMove(event) {\n        if (_this._config.onPressMove != null) {\n          _this._config.onPressMove(event);\n        }\n\n        var touch = getTouchFromResponderEvent(event);\n\n        if (_this._touchActivatePosition != null) {\n          var deltaX = _this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = _this._touchActivatePosition.pageY - touch.pageY;\n\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            _this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        return end(event);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        if (event.nativeEvent.type === 'selectionchange') {\n          _this._selectionTerminated = true;\n        }\n\n        _this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        var _this$_config = _this._config,\n            cancelable = _this$_config.cancelable,\n            disabled = _this$_config.disabled,\n            onLongPress = _this$_config.onLongPress; // If `onLongPress` is provided, don't terminate on `contextmenu` as default\n        // behavior will be prevented for non-mouse pointers.\n\n        if (!disabled && onLongPress != null && _this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n\n        if (cancelable == null) {\n          return true;\n        }\n\n        return cancelable;\n      },\n      // NOTE: this diverges from react-native in 3 significant ways:\n      // * The `onPress` callback is not connected to the responder system (the native\n      //  `click` event must be used but is dispatched in many scenarios where no pointers\n      //   are on the screen.) Therefore, it's possible for `onPress` to be called without\n      //   `onPress{Start,End}` being called first.\n      // * The `onPress` callback is only be called on the first ancestor of the native\n      //   `click` target that is using the PressResponder.\n      // * The event's `nativeEvent` is a `MouseEvent` not a `TouchEvent`.\n      onClick: function onClick(event) {\n        var _this$_config2 = _this._config,\n            disabled = _this$_config2.disabled,\n            onPress = _this$_config2.onPress;\n\n        if (!disabled) {\n          // If long press dispatched, cancel default click behavior.\n          // If the responder terminated because text was selected during the gesture,\n          // cancel the default click behavior.\n          event.stopPropagation();\n\n          if (_this._longPressDispatched || _this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.ctrlKey === false && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      // If `onLongPress` is provided and a touch pointer is being used, prevent the\n      // default context menu from opening.\n      onContextMenu: function onContextMenu(event) {\n        var _this$_config3 = _this._config,\n            disabled = _this$_config3.disabled,\n            onLongPress = _this$_config3.onLongPress;\n\n        if (!disabled) {\n          if (onLongPress != null && _this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  }\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  ;\n\n  _proto._receiveSignal = function _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n\n    if (this._responder == null && signal === RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n\n      this._touchState = nextState;\n    }\n  }\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  ;\n\n  _proto._performTransitionSideEffects = function _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      this._isPointerTouch = false;\n      this._touchActivatePosition = null;\n\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress; // Long press is not supported for keyboards because 'click' can be dispatched\n      // immediately (and multiple times) after 'keydown'.\n\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n          _onLongPress = _this$_config4.onLongPress,\n          onPress = _this$_config4.onPress;\n\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  };\n\n  _proto._activate = function _activate(event) {\n    var _this$_config5 = this._config,\n        onPressChange = _this$_config5.onPressChange,\n        onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  };\n\n  _proto._deactivate = function _deactivate(event) {\n    var _this$_config6 = this._config,\n        onPressChange = _this$_config6.onPressChange,\n        onPressEnd = _this$_config6.onPressEnd;\n\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(function () {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  };\n\n  _proto._handleLongPress = function _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  };\n\n  _proto._cancelLongPressDelayTimeout = function _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  };\n\n  _proto._cancelPressDelayTimeout = function _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  };\n\n  _proto._cancelPressOutDelayTimeout = function _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  };\n\n  return PressResponder;\n}();\n\nexports.default = PressResponder;\n\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\n\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n      changedTouches = _event$nativeEvent.changedTouches,\n      touches = _event$nativeEvent.touches;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n\n  return event.nativeEvent;\n}\n\nmodule.exports = exports.default;\n\n/***/ }),\n\n/***/ \"pllh\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n\nexports.__esModule = true;\nexports.default = usePressEvents;\n\nvar _PressResponder = _interopRequireDefault(__webpack_require__(\"KwZf\"));\n\nvar _react = __webpack_require__(\"ERkP\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction usePressEvents(hostRef, config) {\n  var pressResponderRef = (0, _react.useRef)(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new _PressResponder.default(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  (0, _react.useEffect)(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  (0, _react.useEffect)(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  (0, _react.useDebugValue)(config);\n  return pressResponder.getEventHandlers();\n}\n\nmodule.exports = exports.default;\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/node_modules/react-native-web/dist/cjs/modules/usePressEvents/PressResponder.js","/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/node_modules/react-native-web/dist/cjs/modules/usePressEvents/index.js"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAgD;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,oDAAoD;AACpD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iDAAiD;AACjD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iC;;;;;;;;AC9iBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;;AAEb;AACA;;AAEA,6CAA6C,mBAAO,CAAC,MAAkB;;AAEvE,aAAa,mBAAO,CAAC,MAAO;;AAE5B,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;AACA;;AAEA,iDAAiD;;AAEjD;AACA;AACA,GAAG,4BAA4B;AAC/B;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,iC","file":"x","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nexports.__esModule = true;\nexports.default = void 0;\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\n\nvar isActiveSignal = function isActiveSignal(signal) {\n  return signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isButtonRole = function isButtonRole(element) {\n  return element.getAttribute('role') === 'button';\n};\n\nvar isPressStartSignal = function isPressStartSignal(signal) {\n  return signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isTerminalSignal = function isTerminalSignal(signal) {\n  return signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\n};\n\nvar isValidKeyPress = function isValidKeyPress(event) {\n  var key = event.key;\n  var target = event.currentTarget;\n  var role = target.getAttribute('role');\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  return !event.repeat && (key === 'Enter' || isSpacebar && (role === 'button' || role === 'menuitem'));\n};\n\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450; // 500 - 50\n\nvar DEFAULT_PRESS_DELAY_MS = 50;\n/**\n * =========================== PressResponder Tutorial ===========================\n *\n * The `PressResponder` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `PressResponder`, do the following:\n *\n *     const pressResponder = new PressResponder(config);\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressResponder.getEventHandlers()} />\n *    );\n *\n * 3. Reset `PressResponder` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressResponder.reset();\n *    }\n *\n * ==================== Implementation Details ====================\n *\n * `PressResponder` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`.\n *  │  │  ┌────────────┐  │  │\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates.\n *  │  └──────────────────┘  │\n *  │       Out Region   o   │\n *  └────────────────────│───┘\n *                       └────── When the press is released outside the `HitRect`,\n *                               the responder is NOT eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_START         ├────────▶ │ PRESS_START       ├────────────▶ │ LONG_PRESS_START  │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onLongPress`. Only when the browser produces a\n * `click` event is `onPress` invoked.\n */\n\nvar PressResponder =\n/*#__PURE__*/\nfunction () {\n  function PressResponder(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n\n  var _proto = PressResponder.prototype;\n\n  _proto.configure = function configure(config) {\n    this._config = config;\n  }\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  ;\n\n  _proto.reset = function reset() {\n    this._cancelLongPressDelayTimeout();\n\n    this._cancelPressDelayTimeout();\n\n    this._cancelPressOutDelayTimeout();\n  }\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  ;\n\n  _proto.getEventHandlers = function getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n\n    return this._eventHandlers;\n  };\n\n  _proto._createEventHandlers = function _createEventHandlers() {\n    var _this = this;\n\n    var start = function start(event, shouldDelay) {\n      event.persist();\n\n      _this._cancelPressOutDelayTimeout();\n\n      _this._longPressDispatched = false;\n      _this._responder = event.currentTarget;\n      _this._selectionTerminated = false;\n      _this._touchState = NOT_RESPONDER;\n      _this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n\n      _this._receiveSignal(RESPONDER_GRANT, event);\n\n      var delayPressStart = normalizeDelay(_this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n\n      if (shouldDelay !== false && delayPressStart > 0) {\n        _this._pressDelayTimeout = setTimeout(function () {\n          _this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        _this._receiveSignal(DELAY, event);\n      }\n\n      var delayLongPress = normalizeDelay(_this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      _this._longPressDelayTimeout = setTimeout(function () {\n        _this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n\n    var end = function end(event) {\n      _this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n\n    var keyupHandler = function keyupHandler(event) {\n      if (_this._touchState !== NOT_RESPONDER) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n      }\n    };\n\n    return {\n      onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n        var disabled = _this._config.disabled;\n\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n\n        if (disabled == null) {\n          return true;\n        }\n\n        return !disabled;\n      },\n      onKeyDown: function onKeyDown(event) {\n        if (isValidKeyPress(event)) {\n          if (_this._touchState === NOT_RESPONDER) {\n            start(event, false); // Listen to 'keyup' on document to account for situations where\n            // focus is moved to another element during 'keydown'.\n\n            document.addEventListener('keyup', keyupHandler);\n          }\n\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: function onResponderGrant(event) {\n        return start(event);\n      },\n      onResponderMove: function onResponderMove(event) {\n        if (_this._config.onPressMove != null) {\n          _this._config.onPressMove(event);\n        }\n\n        var touch = getTouchFromResponderEvent(event);\n\n        if (_this._touchActivatePosition != null) {\n          var deltaX = _this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = _this._touchActivatePosition.pageY - touch.pageY;\n\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            _this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: function onResponderRelease(event) {\n        return end(event);\n      },\n      onResponderTerminate: function onResponderTerminate(event) {\n        if (event.nativeEvent.type === 'selectionchange') {\n          _this._selectionTerminated = true;\n        }\n\n        _this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n        var _this$_config = _this._config,\n            cancelable = _this$_config.cancelable,\n            disabled = _this$_config.disabled,\n            onLongPress = _this$_config.onLongPress; // If `onLongPress` is provided, don't terminate on `contextmenu` as default\n        // behavior will be prevented for non-mouse pointers.\n\n        if (!disabled && onLongPress != null && _this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n\n        if (cancelable == null) {\n          return true;\n        }\n\n        return cancelable;\n      },\n      // NOTE: this diverges from react-native in 3 significant ways:\n      // * The `onPress` callback is not connected to the responder system (the native\n      //  `click` event must be used but is dispatched in many scenarios where no pointers\n      //   are on the screen.) Therefore, it's possible for `onPress` to be called without\n      //   `onPress{Start,End}` being called first.\n      // * The `onPress` callback is only be called on the first ancestor of the native\n      //   `click` target that is using the PressResponder.\n      // * The event's `nativeEvent` is a `MouseEvent` not a `TouchEvent`.\n      onClick: function onClick(event) {\n        var _this$_config2 = _this._config,\n            disabled = _this$_config2.disabled,\n            onPress = _this$_config2.onPress;\n\n        if (!disabled) {\n          // If long press dispatched, cancel default click behavior.\n          // If the responder terminated because text was selected during the gesture,\n          // cancel the default click behavior.\n          event.stopPropagation();\n\n          if (_this._longPressDispatched || _this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.ctrlKey === false && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      // If `onLongPress` is provided and a touch pointer is being used, prevent the\n      // default context menu from opening.\n      onContextMenu: function onContextMenu(event) {\n        var _this$_config3 = _this._config,\n            disabled = _this$_config3.disabled,\n            onLongPress = _this$_config3.onLongPress;\n\n        if (!disabled) {\n          if (onLongPress != null && _this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  }\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  ;\n\n  _proto._receiveSignal = function _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n\n    if (this._responder == null && signal === RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n\n      this._touchState = nextState;\n    }\n  }\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  ;\n\n  _proto._performTransitionSideEffects = function _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      this._isPointerTouch = false;\n      this._touchActivatePosition = null;\n\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress; // Long press is not supported for keyboards because 'click' can be dispatched\n      // immediately (and multiple times) after 'keydown'.\n\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n          _onLongPress = _this$_config4.onLongPress,\n          onPress = _this$_config4.onPress;\n\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  };\n\n  _proto._activate = function _activate(event) {\n    var _this$_config5 = this._config,\n        onPressChange = _this$_config5.onPressChange,\n        onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  };\n\n  _proto._deactivate = function _deactivate(event) {\n    var _this$_config6 = this._config,\n        onPressChange = _this$_config6.onPressChange,\n        onPressEnd = _this$_config6.onPressEnd;\n\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(function () {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  };\n\n  _proto._handleLongPress = function _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  };\n\n  _proto._cancelLongPressDelayTimeout = function _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  };\n\n  _proto._cancelPressDelayTimeout = function _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  };\n\n  _proto._cancelPressOutDelayTimeout = function _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  };\n\n  return PressResponder;\n}();\n\nexports.default = PressResponder;\n\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\n\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n      changedTouches = _event$nativeEvent.changedTouches,\n      touches = _event$nativeEvent.touches;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n\n  return event.nativeEvent;\n}\n\nmodule.exports = exports.default;","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nexports.__esModule = true;\nexports.default = usePressEvents;\n\nvar _PressResponder = _interopRequireDefault(require(\"./PressResponder\"));\n\nvar _react = require(\"react\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction usePressEvents(hostRef, config) {\n  var pressResponderRef = (0, _react.useRef)(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new _PressResponder.default(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  (0, _react.useEffect)(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  (0, _react.useEffect)(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  (0, _react.useDebugValue)(config);\n  return pressResponder.getEventHandlers();\n}\n\nmodule.exports = exports.default;"]}}