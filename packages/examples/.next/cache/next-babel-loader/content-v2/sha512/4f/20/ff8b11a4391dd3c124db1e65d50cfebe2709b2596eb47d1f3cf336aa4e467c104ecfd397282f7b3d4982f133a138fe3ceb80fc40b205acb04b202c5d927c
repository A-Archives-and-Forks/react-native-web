{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/cjs/exports/Animated\";\nimport FlatList from \"react-native-web/dist/cjs/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport { FooterComponent, HeaderComponent, ItemComponent, ItemSeparatorComponent, PlainInput, SeparatorComponent, Spindicator, genItemData, getItemLayout, pressItem, renderSmallSwitchOption } from './shared';\nconst AnimatedFlatList = Animated.createAnimatedComponent(FlatList);\nconst VIEWABILITY_CONFIG = {\n  minimumViewTime: 3000,\n  viewAreaCoveragePercentThreshold: 100,\n  waitForInteraction: true\n};\n\nclass SingleColumnExample extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      data: genItemData(100),\n      debug: false,\n      horizontal: false,\n      inverted: false,\n      filterText: '',\n      fixedHeight: true,\n      logViewable: false,\n      virtualized: true\n    });\n\n    _defineProperty(this, \"_onChangeFilterText\", filterText => {\n      this.setState({\n        filterText\n      });\n    });\n\n    _defineProperty(this, \"_onChangeScrollToIndex\", text => {\n      this._listRef.getNode().scrollToIndex({\n        viewPosition: 0.5,\n        index: Number(text)\n      });\n    });\n\n    _defineProperty(this, \"_scrollPos\", new Animated.Value(0));\n\n    _defineProperty(this, \"_scrollSinkX\", Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: this._scrollPos\n        }\n      }\n    }], {\n      useNativeDriver: true\n    }));\n\n    _defineProperty(this, \"_scrollSinkY\", Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          y: this._scrollPos\n        }\n      }\n    }], {\n      useNativeDriver: true\n    }));\n\n    _defineProperty(this, \"_captureRef\", ref => {\n      this._listRef = ref;\n    });\n\n    _defineProperty(this, \"_getItemLayout\", (data, index) => {\n      return getItemLayout(data, index, this.state.horizontal);\n    });\n\n    _defineProperty(this, \"_onEndReached\", () => {\n      if (this.state.data.length >= 1000) {\n        return;\n      }\n\n      this.setState(state => ({\n        data: state.data.concat(genItemData(100, state.data.length))\n      }));\n    });\n\n    _defineProperty(this, \"_onRefresh\", () => console.log('onRefresh: nothing to refresh :P'));\n\n    _defineProperty(this, \"_renderItemComponent\", ({\n      item,\n      separators\n    }) => {\n      return /*#__PURE__*/_jsx(ItemComponent, {\n        fixedHeight: this.state.fixedHeight,\n        horizontal: this.state.horizontal,\n        item: item,\n        onHideUnderlay: separators.unhighlight,\n        onPress: this._pressItem,\n        onShowUnderlay: separators.highlight\n      });\n    });\n\n    _defineProperty(this, \"_onViewableItemsChanged\", info => {\n      // Impressions can be logged here\n      if (this.state.logViewable) {\n        console.log('onViewableItemsChanged: ', info.changed.map(v => _objectSpread(_objectSpread({}, v), {}, {\n          item: '...'\n        })));\n      }\n    });\n\n    _defineProperty(this, \"_pressItem\", key => {\n      this._listRef.getNode().recordInteraction();\n\n      pressItem(this, key);\n    });\n  }\n\n  componentDidUpdate() {\n    this._listRef.getNode().recordInteraction(); // e.g. flipping logViewable switch\n\n  }\n\n  render() {\n    const filterRegex = new RegExp(String(this.state.filterText), 'i');\n\n    const filter = item => filterRegex.test(item.text) || filterRegex.test(item.title);\n\n    const filteredData = this.state.data.filter(filter);\n    return /*#__PURE__*/_jsxs(View, {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxs(View, {\n        style: styles.searchRow,\n        children: [/*#__PURE__*/_jsxs(View, {\n          style: styles.options,\n          children: [/*#__PURE__*/_jsx(PlainInput, {\n            onChangeText: this._onChangeFilterText,\n            placeholder: \"Search...\",\n            value: this.state.filterText\n          }), /*#__PURE__*/_jsx(PlainInput, {\n            onChangeText: this._onChangeScrollToIndex,\n            placeholder: \"scrollToIndex...\"\n          })]\n        }), /*#__PURE__*/_jsxs(View, {\n          style: styles.options,\n          children: [renderSmallSwitchOption(this, 'virtualized'), renderSmallSwitchOption(this, 'horizontal'), renderSmallSwitchOption(this, 'fixedHeight'), renderSmallSwitchOption(this, 'logViewable'), renderSmallSwitchOption(this, 'inverted'), renderSmallSwitchOption(this, 'debug'), /*#__PURE__*/_jsx(Spindicator, {\n            value: this._scrollPos\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(SeparatorComponent, {}), /*#__PURE__*/_jsx(AnimatedFlatList, {\n        contentContainerStyle: styles.list,\n        data: filteredData,\n        debug: this.state.debug,\n        disableVirtualization: !this.state.virtualized,\n        getItemLayout: this.state.fixedHeight ? this._getItemLayout : undefined,\n        horizontal: this.state.horizontal,\n        inverted: this.state.inverted,\n        ItemSeparatorComponent: ItemSeparatorComponent,\n        keyboardDismissMode: \"on-drag\",\n        keyboardShouldPersistTaps: \"always\",\n        legacyImplementation: false,\n        ListFooterComponent: FooterComponent,\n        ListHeaderComponent: /*#__PURE__*/_jsx(HeaderComponent, {}),\n        numColumns: 1,\n        onEndReached: this._onEndReached,\n        onRefresh: this._onRefresh,\n        onScroll: this.state.horizontal ? this._scrollSinkX : this._scrollSinkY,\n        onViewableItemsChanged: this._onViewableItemsChanged,\n        ref: this._captureRef,\n        refreshing: false,\n        renderItem: this._renderItemComponent,\n        viewabilityConfig: VIEWABILITY_CONFIG\n      }, (this.state.horizontal ? 'h' : 'v') + (this.state.fixedHeight ? 'f' : 'd'))]\n    });\n  }\n\n}\n\n_defineProperty(SingleColumnExample, \"title\", '<FlatList>');\n\n_defineProperty(SingleColumnExample, \"description\", 'Performant, scrollable list of data.');\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'rgb(239, 239, 244)',\n    flex: 1\n  },\n  list: {\n    backgroundColor: 'white'\n  },\n  options: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center'\n  },\n  searchRow: {\n    paddingHorizontal: 10\n  }\n});\nexport default function () {\n  return /*#__PURE__*/_jsx(View, {\n    style: {\n      height: 300\n    },\n    children: /*#__PURE__*/_jsx(SingleColumnExample, {})\n  });\n}","map":null,"metadata":{},"sourceType":"module"}