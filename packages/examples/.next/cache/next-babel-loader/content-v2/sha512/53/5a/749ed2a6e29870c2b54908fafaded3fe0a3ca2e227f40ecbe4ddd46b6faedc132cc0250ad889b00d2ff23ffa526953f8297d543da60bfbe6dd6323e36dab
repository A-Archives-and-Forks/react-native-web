{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/pressable/examples/FeedbackEvents.js\";\nimport React from 'react';\nimport Pressable from \"react-native-web/dist/cjs/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nexport default function FeedbackEvents() {\n  const [eventLog, updateEventLog] = React.useState([]);\n\n  const handlePress = eventName => {\n    return () => {\n      const limit = 6;\n      updateEventLog(state => {\n        const nextState = state.slice(0, limit - 1);\n        nextState.unshift(eventName);\n        return nextState;\n      });\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(View, {\n    children: [/*#__PURE__*/_jsxDEV(View, {\n      children: /*#__PURE__*/_jsxDEV(Pressable, {\n        onLongPress: handlePress('longPress'),\n        onPress: handlePress('press'),\n        onPressIn: handlePress('pressIn'),\n        onPressOut: handlePress('pressOut'),\n        children: /*#__PURE__*/_jsxDEV(View, {\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            style: styles.touchableText,\n            children: \"Press Me\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(View, {\n      children: /*#__PURE__*/_jsxDEV(Pressable, {\n        accessibilityRole: \"none\",\n        onLongPress: handlePress('longPress'),\n        onPress: handlePress('press'),\n        onPressIn: handlePress('pressIn'),\n        onPressOut: handlePress('pressOut'),\n        style: ({\n          hovered,\n          pressed,\n          focused\n        }) => {\n          let backgroundColor = 'white';\n\n          if (hovered) {\n            backgroundColor = 'lightgray';\n          }\n\n          if (pressed) {\n            backgroundColor = 'lightblue';\n          }\n\n          return {\n            padding: 10,\n            margin: 10,\n            borderWidth: 1,\n            borderColor: focused ? 'red' : null,\n            backgroundColor,\n            outlineWidth: 0\n          };\n        },\n        children: /*#__PURE__*/_jsxDEV(Pressable, {\n          accessibilityRole: \"button\",\n          onLongPress: handlePress('longPress - inner'),\n          onPress: handlePress('press - inner'),\n          onPressIn: handlePress('pressIn - inner'),\n          onPressOut: handlePress('pressOut - inner'),\n          style: ({\n            hovered,\n            pressed,\n            focused\n          }) => {\n            let backgroundColor = 'white';\n\n            if (hovered) {\n              backgroundColor = 'lightgray';\n            }\n\n            if (pressed) {\n              backgroundColor = 'lightblue';\n            }\n\n            return {\n              padding: 10,\n              margin: 10,\n              borderWidth: 1,\n              borderColor: focused ? 'red' : null,\n              backgroundColor,\n              outlineWidth: 0\n            };\n          },\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            children: \"Nested pressables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(View, {\n      style: styles.eventLogBox,\n      children: eventLog.map((e, ii) => /*#__PURE__*/_jsxDEV(Text, {\n        children: e\n      }, ii, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  touchableText: {\n    borderRadius: 8,\n    padding: 5,\n    borderWidth: 1,\n    borderColor: 'black',\n    color: '#007AFF',\n    borderStyle: 'solid',\n    textAlign: 'center'\n  },\n  eventLogBox: {\n    padding: 10,\n    marginTop: 10,\n    height: 120,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  }\n});","map":{"version":3,"sources":["/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/pressable/examples/FeedbackEvents.js"],"names":["React","FeedbackEvents","eventLog","updateEventLog","useState","handlePress","eventName","limit","state","nextState","slice","unshift","styles","touchableText","hovered","pressed","focused","backgroundColor","padding","margin","borderWidth","borderColor","outlineWidth","eventLogBox","map","e","ii","StyleSheet","create","borderRadius","color","borderStyle","textAlign","marginTop","height","hairlineWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Pressable, StyleSheet, Text, View } from 'react-native';\n\nexport default function FeedbackEvents() {\n  const [eventLog, updateEventLog] = React.useState([]);\n\n  const handlePress = eventName => {\n    return () => {\n      const limit = 6;\n      updateEventLog(state => {\n        const nextState = state.slice(0, limit - 1);\n        nextState.unshift(eventName);\n        return nextState;\n      });\n    };\n  };\n\n  return (\n    <View>\n      <View>\n        <Pressable\n          onLongPress={handlePress('longPress')}\n          onPress={handlePress('press')}\n          onPressIn={handlePress('pressIn')}\n          onPressOut={handlePress('pressOut')}\n        >\n          <View>\n            <Text style={styles.touchableText}>Press Me</Text>\n          </View>\n        </Pressable>\n      </View>\n\n      <View>\n        <Pressable\n          accessibilityRole=\"none\"\n          onLongPress={handlePress('longPress')}\n          onPress={handlePress('press')}\n          onPressIn={handlePress('pressIn')}\n          onPressOut={handlePress('pressOut')}\n          style={({ hovered, pressed, focused }) => {\n            let backgroundColor = 'white';\n            if (hovered) {\n              backgroundColor = 'lightgray';\n            }\n            if (pressed) {\n              backgroundColor = 'lightblue';\n            }\n            return {\n              padding: 10,\n              margin: 10,\n              borderWidth: 1,\n              borderColor: focused ? 'red' : null,\n              backgroundColor,\n              outlineWidth: 0\n            };\n          }}\n        >\n          <Pressable\n            accessibilityRole=\"button\"\n            onLongPress={handlePress('longPress - inner')}\n            onPress={handlePress('press - inner')}\n            onPressIn={handlePress('pressIn - inner')}\n            onPressOut={handlePress('pressOut - inner')}\n            style={({ hovered, pressed, focused }) => {\n              let backgroundColor = 'white';\n              if (hovered) {\n                backgroundColor = 'lightgray';\n              }\n              if (pressed) {\n                backgroundColor = 'lightblue';\n              }\n              return {\n                padding: 10,\n                margin: 10,\n                borderWidth: 1,\n                borderColor: focused ? 'red' : null,\n                backgroundColor,\n                outlineWidth: 0\n              };\n            }}\n          >\n            <Text>Nested pressables</Text>\n          </Pressable>\n        </Pressable>\n      </View>\n\n      <View style={styles.eventLogBox}>\n        {eventLog.map((e, ii) => (\n          <Text key={ii}>{e}</Text>\n        ))}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  touchableText: {\n    borderRadius: 8,\n    padding: 5,\n    borderWidth: 1,\n    borderColor: 'black',\n    color: '#007AFF',\n    borderStyle: 'solid',\n    textAlign: 'center'\n  },\n  eventLogBox: {\n    padding: 10,\n    marginTop: 10,\n    height: 120,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}