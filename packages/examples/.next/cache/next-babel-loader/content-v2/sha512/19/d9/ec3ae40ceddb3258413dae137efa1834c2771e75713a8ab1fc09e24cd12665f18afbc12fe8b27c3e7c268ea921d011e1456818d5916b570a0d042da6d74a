{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { styles } from '../helpers';\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport TextInput from \"react-native-web/dist/cjs/exports/TextInput\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\n\nclass OnSelectionChangeExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSelectionChange\", ({\n      nativeEvent: {\n        selection\n      }\n    }) => {\n      this.setState({\n        selection\n      });\n    });\n\n    _defineProperty(this, \"onChangeText\", value => {\n      this.setState({\n        value\n      });\n    });\n\n    _defineProperty(this, \"select\", (start, end) => () => {\n      this._textInput.focus();\n\n      this.setState({\n        selection: {\n          start,\n          end\n        }\n      });\n    });\n\n    _defineProperty(this, \"selectRandom\", () => {\n      const positions = [this.getRandomPosition(), this.getRandomPosition()].sort();\n      this.select(...positions)();\n    });\n\n    _defineProperty(this, \"placeAt\", position => () => {\n      this.select(position, position)();\n    });\n\n    _defineProperty(this, \"placeAtRandom\", () => {\n      this.placeAt(this.getRandomPosition())();\n    });\n\n    _defineProperty(this, \"setRef\", textInput => {\n      this._textInput = textInput;\n    });\n\n    this.state = {\n      selection: {\n        start: 0,\n        end: 0\n      },\n      value: props.value\n    };\n  }\n\n  getRandomPosition() {\n    const length = this.state.value.length;\n    return Math.round(Math.random() * length);\n  }\n\n  render() {\n    const length = this.state.value.length;\n    return /*#__PURE__*/_jsxs(View, {\n      children: [/*#__PURE__*/_jsx(TextInput, {\n        multiline: this.props.multiline,\n        onChangeText: this.onChangeText,\n        onSelectionChange: this.onSelectionChange,\n        ref: this.setRef,\n        selection: this.state.selection,\n        style: this.props.style,\n        value: this.state.value\n      }), /*#__PURE__*/_jsxs(View, {\n        children: [/*#__PURE__*/_jsxs(Text, {\n          children: [\"selection = \", JSON.stringify(this.state.selection)]\n        }), /*#__PURE__*/_jsx(Text, {\n          onPress: this.placeAt(0),\n          children: \"Place at Start (0, 0)\"\n        }), /*#__PURE__*/_jsxs(Text, {\n          onPress: this.placeAt(length),\n          children: [\"Place at End (\", length, \", \", length, \")\"]\n        }), /*#__PURE__*/_jsx(Text, {\n          onPress: this.placeAtRandom,\n          children: \"Place at Random\"\n        }), /*#__PURE__*/_jsx(Text, {\n          onPress: this.select(0, length),\n          children: \"Select All\"\n        }), /*#__PURE__*/_jsx(Text, {\n          onPress: this.selectRandom,\n          children: \"Select Random\"\n        })]\n      })]\n    });\n  }\n\n}\n\nconst TextInputOnSelectionChangeExample = () => /*#__PURE__*/_jsxs(View, {\n  children: [/*#__PURE__*/_jsx(OnSelectionChangeExample, {\n    style: styles.textinput,\n    value: \"text selection can be changed\"\n  }), /*#__PURE__*/_jsx(OnSelectionChangeExample, {\n    multiline: true,\n    style: styles.multiline,\n    value: 'multiline text selection\\ncan also be changed'\n  })]\n});\n\nexport default function OnSelectionChange() {\n  return /*#__PURE__*/_jsx(TextInputOnSelectionChangeExample, {});\n}","map":null,"metadata":{},"sourceType":"module"}