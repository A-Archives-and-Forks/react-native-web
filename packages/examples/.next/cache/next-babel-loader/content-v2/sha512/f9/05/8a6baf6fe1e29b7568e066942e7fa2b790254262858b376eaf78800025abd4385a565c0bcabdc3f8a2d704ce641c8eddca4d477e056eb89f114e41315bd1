{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Button from \"react-native-web/dist/cjs/exports/Button\";\nimport Dimensions from \"react-native-web/dist/cjs/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/cjs/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport React from 'react';\n\nclass DimensionsExample extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      listened: false,\n      logs: []\n    });\n\n    _defineProperty(this, \"toggle\", () => {\n      const {\n        listened\n      } = this.state;\n\n      if (listened) {\n        Dimensions.removeEventListener('change', this._handleChange);\n\n        this._log('Removed listener');\n      } else {\n        Dimensions.addEventListener('change', this._handleChange);\n\n        this._log('Added listener');\n      }\n\n      this.setState(() => ({\n        listened: !listened\n      }));\n    });\n\n    _defineProperty(this, \"_handleChange\", ({\n      window,\n      screen\n    }) => {\n      window = JSON.stringify(window, null, 2);\n      screen = JSON.stringify(screen, null, 2);\n\n      this._log(`Changed\\nwindow = ${window}\\nscreen = ${screen}`);\n    });\n\n    _defineProperty(this, \"_log\", msg => {\n      this.setState(state => ({\n        logs: [`${new Date().toTimeString()} - ${msg}`, ...state.logs]\n      }));\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._handleChange);\n  }\n\n  render() {\n    const {\n      logs,\n      listened\n    } = this.state;\n    const buttonTitle = listened ? 'Remove dimensions listener' : 'Add dimensions listener';\n    return /*#__PURE__*/_jsxs(View, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        onPress: this.toggle,\n        title: buttonTitle\n      }), /*#__PURE__*/_jsx(ScrollView, {\n        style: styles.logs,\n        children: logs.map((log, i) => /*#__PURE__*/_jsx(Text, {\n          style: styles.log,\n          children: log\n        }, i))\n      })]\n    });\n  }\n\n}\n\nexport default function DimensionsPage() {\n  return /*#__PURE__*/_jsx(DimensionsExample, {});\n}\nconst styles = StyleSheet.create({\n  logs: {\n    maxHeight: 256\n  },\n  log: {\n    fontFamily: 'monospace, monospace',\n    marginTop: 8,\n    marginBottom: 8\n  }\n});","map":null,"metadata":{},"sourceType":"module"}