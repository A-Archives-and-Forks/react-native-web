{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/image/examples/NetworkImage.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as helpers from '../helpers';\nimport sources from '../sources';\nimport React, { PureComponent } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/cjs/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/cjs/exports/Image\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\n\nclass NetworkImageExample extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      error: false,\n      loading: false\n    });\n\n    _defineProperty(this, \"_handleError\", e => {\n      const nextState = {\n        loading: false\n      };\n\n      if (this.props.logMethod === 'onError') {\n        nextState.message = `✘ onError ${JSON.stringify(e.nativeEvent)}`;\n      }\n\n      this.setState(() => nextState);\n    });\n\n    _defineProperty(this, \"_handleLoad\", () => {\n      const nextState = {\n        loading: false\n      };\n\n      if (this.props.logMethod === 'onLoad') {\n        nextState.message = '✔ onLoad';\n      }\n\n      this.setState(() => nextState);\n    });\n\n    _defineProperty(this, \"_handleLoadEnd\", () => {\n      const nextState = {\n        loading: false\n      };\n\n      if (this.props.logMethod === 'onLoadEnd') {\n        nextState.message = '✔ onLoadEnd';\n      }\n\n      this.setState(() => nextState);\n    });\n\n    _defineProperty(this, \"_handleLoadStart\", () => {\n      const nextState = {\n        loading: true\n      };\n\n      if (this.props.logMethod === 'onLoadStart') {\n        nextState.message = '✔ onLoadStart';\n      }\n\n      this.setState(() => nextState);\n    });\n  }\n\n  render() {\n    const loader = this.state.loading ? /*#__PURE__*/_jsxDEV(View, {\n      children: /*#__PURE__*/_jsxDEV(ActivityIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(View, {\n      children: [loader, /*#__PURE__*/_jsxDEV(Image, {\n        defaultSource: sources.placeholder,\n        onError: this._handleError,\n        onLoad: this._handleLoad,\n        onLoadEnd: this._handleLoadEnd,\n        onLoadStart: this._handleLoadStart,\n        source: this.props.source,\n        style: helpers.styles.base\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), this.state.message && /*#__PURE__*/_jsxDEV(Text, {\n        style: helpers.styles.marginTop,\n        children: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n_defineProperty(NetworkImageExample, \"defaultProps\", {\n  logList: []\n});\n\nexport default NetworkImageExample;","map":{"version":3,"sources":["/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/image/examples/NetworkImage.js"],"names":["helpers","sources","React","PureComponent","NetworkImageExample","error","loading","e","nextState","props","logMethod","message","JSON","stringify","nativeEvent","setState","render","loader","state","placeholder","_handleError","_handleLoad","_handleLoadEnd","_handleLoadStart","source","styles","base","marginTop","logList"],"mappings":";;;;;AAAA,OAAO,KAAKA,OAAZ,MAAyB,YAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;;;;;AAGA,MAAMC,mBAAN,SAAkCD,aAAlC,CAAgD;AAAA;AAAA;;AAAA,mCACtC;AACNE,MAAAA,KAAK,EAAE,KADD;AAENC,MAAAA,OAAO,EAAE;AAFH,KADsC;;AAAA,0CAkC/BC,CAAC,IAAI;AAClB,YAAMC,SAAS,GAAG;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAlB;;AACA,UAAI,KAAKG,KAAL,CAAWC,SAAX,KAAyB,SAA7B,EAAwC;AACtCF,QAAAA,SAAS,CAACG,OAAV,GAAqB,aAAYC,IAAI,CAACC,SAAL,CAAeN,CAAC,CAACO,WAAjB,CAA8B,EAA/D;AACD;;AACD,WAAKC,QAAL,CAAc,MAAMP,SAApB;AACD,KAxC6C;;AAAA,yCA0ChC,MAAM;AAClB,YAAMA,SAAS,GAAG;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAlB;;AACA,UAAI,KAAKG,KAAL,CAAWC,SAAX,KAAyB,QAA7B,EAAuC;AACrCF,QAAAA,SAAS,CAACG,OAAV,GAAoB,UAApB;AACD;;AACD,WAAKI,QAAL,CAAc,MAAMP,SAApB;AACD,KAhD6C;;AAAA,4CAkD7B,MAAM;AACrB,YAAMA,SAAS,GAAG;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAlB;;AACA,UAAI,KAAKG,KAAL,CAAWC,SAAX,KAAyB,WAA7B,EAA0C;AACxCF,QAAAA,SAAS,CAACG,OAAV,GAAoB,aAApB;AACD;;AACD,WAAKI,QAAL,CAAc,MAAMP,SAApB;AACD,KAxD6C;;AAAA,8CA0D3B,MAAM;AACvB,YAAMA,SAAS,GAAG;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAlB;;AACA,UAAI,KAAKG,KAAL,CAAWC,SAAX,KAAyB,aAA7B,EAA4C;AAC1CF,QAAAA,SAAS,CAACG,OAAV,GAAoB,eAApB;AACD;;AACD,WAAKI,QAAL,CAAc,MAAMP,SAApB;AACD,KAhE6C;AAAA;;AAU9CQ,EAAAA,MAAM,GAAG;AACP,UAAMC,MAAM,GAAG,KAAKC,KAAL,CAAWZ,OAAX,gBACb,QAAC,IAAD;AAAA,6BACE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADa,GAIX,IAJJ;AAMA,wBACE,QAAC,IAAD;AAAA,iBACGW,MADH,eAEE,QAAC,KAAD;AACE,QAAA,aAAa,EAAEhB,OAAO,CAACkB,WADzB;AAEE,QAAA,OAAO,EAAE,KAAKC,YAFhB;AAGE,QAAA,MAAM,EAAE,KAAKC,WAHf;AAIE,QAAA,SAAS,EAAE,KAAKC,cAJlB;AAKE,QAAA,WAAW,EAAE,KAAKC,gBALpB;AAME,QAAA,MAAM,EAAE,KAAKd,KAAL,CAAWe,MANrB;AAOE,QAAA,KAAK,EAAExB,OAAO,CAACyB,MAAR,CAAeC;AAPxB;AAAA;AAAA;AAAA;AAAA,cAFF,EAWG,KAAKR,KAAL,CAAWP,OAAX,iBAAsB,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEX,OAAO,CAACyB,MAAR,CAAeE,SAA5B;AAAA,kBAAwC,KAAKT,KAAL,CAAWP;AAAnD;AAAA;AAAA;AAAA;AAAA,cAXzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAhC6C;;gBAA1CP,mB,kBAMkB;AACpBwB,EAAAA,OAAO,EAAE;AADW,C;;AA6DxB,eAAexB,mBAAf","sourcesContent":["import * as helpers from '../helpers';\nimport sources from '../sources';\nimport React, { PureComponent } from 'react';\nimport { ActivityIndicator, Image, Text, View } from 'react-native';\n\nclass NetworkImageExample extends PureComponent {\n  state = {\n    error: false,\n    loading: false\n  };\n\n  static defaultProps = {\n    logList: []\n  };\n\n  render() {\n    const loader = this.state.loading ? (\n      <View>\n        <ActivityIndicator />\n      </View>\n    ) : null;\n\n    return (\n      <View>\n        {loader}\n        <Image\n          defaultSource={sources.placeholder}\n          onError={this._handleError}\n          onLoad={this._handleLoad}\n          onLoadEnd={this._handleLoadEnd}\n          onLoadStart={this._handleLoadStart}\n          source={this.props.source}\n          style={helpers.styles.base}\n        />\n        {this.state.message && <Text style={helpers.styles.marginTop}>{this.state.message}</Text>}\n      </View>\n    );\n  }\n\n  _handleError = e => {\n    const nextState = { loading: false };\n    if (this.props.logMethod === 'onError') {\n      nextState.message = `✘ onError ${JSON.stringify(e.nativeEvent)}`;\n    }\n    this.setState(() => nextState);\n  };\n\n  _handleLoad = () => {\n    const nextState = { loading: false };\n    if (this.props.logMethod === 'onLoad') {\n      nextState.message = '✔ onLoad';\n    }\n    this.setState(() => nextState);\n  };\n\n  _handleLoadEnd = () => {\n    const nextState = { loading: false };\n    if (this.props.logMethod === 'onLoadEnd') {\n      nextState.message = '✔ onLoadEnd';\n    }\n    this.setState(() => nextState);\n  };\n\n  _handleLoadStart = () => {\n    const nextState = { loading: true };\n    if (this.props.logMethod === 'onLoadStart') {\n      nextState.message = '✔ onLoadStart';\n    }\n    this.setState(() => nextState);\n  };\n}\n\nexport default NetworkImageExample;\n"]},"metadata":{},"sourceType":"module"}