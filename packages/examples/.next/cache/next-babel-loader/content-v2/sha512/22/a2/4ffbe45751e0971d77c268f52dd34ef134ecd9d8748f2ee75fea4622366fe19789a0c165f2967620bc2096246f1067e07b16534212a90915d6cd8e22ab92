{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/text-input/examples/OnSelectionChangeControlled.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { styles } from '../helpers';\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport TextInput from \"react-native-web/dist/cjs/exports/TextInput\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\n\nclass OnSelectionChangeExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onSelectionChange\", ({\n      nativeEvent: {\n        selection\n      }\n    }) => {\n      this.setState({\n        selection\n      });\n    });\n\n    _defineProperty(this, \"onChangeText\", value => {\n      this.setState({\n        value\n      });\n    });\n\n    _defineProperty(this, \"select\", (start, end) => () => {\n      this._textInput.focus();\n\n      this.setState({\n        selection: {\n          start,\n          end\n        }\n      });\n    });\n\n    _defineProperty(this, \"selectRandom\", () => {\n      const positions = [this.getRandomPosition(), this.getRandomPosition()].sort();\n      this.select(...positions)();\n    });\n\n    _defineProperty(this, \"placeAt\", position => () => {\n      this.select(position, position)();\n    });\n\n    _defineProperty(this, \"placeAtRandom\", () => {\n      this.placeAt(this.getRandomPosition())();\n    });\n\n    _defineProperty(this, \"setRef\", textInput => {\n      this._textInput = textInput;\n    });\n\n    this.state = {\n      selection: {\n        start: 0,\n        end: 0\n      },\n      value: props.value\n    };\n  }\n\n  getRandomPosition() {\n    const length = this.state.value.length;\n    return Math.round(Math.random() * length);\n  }\n\n  render() {\n    const length = this.state.value.length;\n    return /*#__PURE__*/_jsxDEV(View, {\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        multiline: this.props.multiline,\n        onChangeText: this.onChangeText,\n        onSelectionChange: this.onSelectionChange,\n        ref: this.setRef,\n        selection: this.state.selection,\n        style: this.props.style,\n        value: this.state.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(View, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [\"selection = \", JSON.stringify(this.state.selection)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          onPress: this.placeAt(0),\n          children: \"Place at Start (0, 0)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          onPress: this.placeAt(length),\n          children: [\"Place at End (\", length, \", \", length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          onPress: this.placeAtRandom,\n          children: \"Place at Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          onPress: this.select(0, length),\n          children: \"Select All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          onPress: this.selectRandom,\n          children: \"Select Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst TextInputOnSelectionChangeExample = () => /*#__PURE__*/_jsxDEV(View, {\n  children: [/*#__PURE__*/_jsxDEV(OnSelectionChangeExample, {\n    style: styles.textinput,\n    value: \"text selection can be changed\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(OnSelectionChangeExample, {\n    multiline: true,\n    style: styles.multiline,\n    value: 'multiline text selection\\ncan also be changed'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 95,\n  columnNumber: 3\n}, this);\n\nexport default function OnSelectionChange() {\n  return /*#__PURE__*/_jsxDEV(TextInputOnSelectionChangeExample, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/text-input/examples/OnSelectionChangeControlled.js"],"names":["React","styles","OnSelectionChangeExample","Component","constructor","props","nativeEvent","selection","setState","value","start","end","_textInput","focus","positions","getRandomPosition","sort","select","position","placeAt","textInput","state","length","Math","round","random","render","multiline","onChangeText","onSelectionChange","setRef","style","JSON","stringify","placeAtRandom","selectRandom","TextInputOnSelectionChangeExample","textinput","OnSelectionChange"],"mappings":"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","sourcesContent":["/**\n * @noflow\n */\n\nimport React from 'react';\nimport { styles } from '../helpers';\nimport { Text, TextInput, View } from 'react-native';\n\ntype SelectionExampleState = {\n  selection: {\n    start: number,\n    end?: number\n  },\n  value: string\n};\n\nclass OnSelectionChangeExample extends React.Component {\n  state: SelectionExampleState;\n\n  _textInput: any;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selection: { start: 0, end: 0 },\n      value: props.value\n    };\n  }\n\n  onSelectionChange = ({ nativeEvent: { selection } }) => {\n    this.setState({ selection });\n  };\n\n  onChangeText = value => {\n    this.setState({ value });\n  };\n\n  getRandomPosition() {\n    const length = this.state.value.length;\n    return Math.round(Math.random() * length);\n  }\n\n  select = (start, end) => () => {\n    this._textInput.focus();\n    this.setState({ selection: { start, end } });\n  };\n\n  selectRandom = () => {\n    const positions = [this.getRandomPosition(), this.getRandomPosition()].sort();\n    this.select(...positions)();\n  };\n\n  placeAt = position => () => {\n    this.select(position, position)();\n  };\n\n  placeAtRandom = () => {\n    this.placeAt(this.getRandomPosition())();\n  };\n\n  setRef = textInput => {\n    this._textInput = textInput;\n  };\n\n  render() {\n    const length = this.state.value.length;\n\n    return (\n      <View>\n        <TextInput\n          multiline={this.props.multiline}\n          onChangeText={this.onChangeText}\n          onSelectionChange={this.onSelectionChange}\n          ref={this.setRef}\n          selection={this.state.selection}\n          style={this.props.style}\n          value={this.state.value}\n        />\n        <View>\n          <Text>selection = {JSON.stringify(this.state.selection)}</Text>\n          <Text onPress={this.placeAt(0)}>Place at Start (0, 0)</Text>\n          <Text onPress={this.placeAt(length)}>\n            Place at End ({length}, {length})\n          </Text>\n          <Text onPress={this.placeAtRandom}>Place at Random</Text>\n          <Text onPress={this.select(0, length)}>Select All</Text>\n          <Text onPress={this.selectRandom}>Select Random</Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst TextInputOnSelectionChangeExample = () => (\n  <View>\n    <OnSelectionChangeExample style={styles.textinput} value=\"text selection can be changed\" />\n    <OnSelectionChangeExample\n      multiline\n      style={styles.multiline}\n      value={'multiline text selection\\ncan also be changed'}\n    />\n  </View>\n);\n\nexport default function OnSelectionChange() {\n  return <TextInputOnSelectionChangeExample />;\n}\n"]},"metadata":{},"sourceType":"module"}