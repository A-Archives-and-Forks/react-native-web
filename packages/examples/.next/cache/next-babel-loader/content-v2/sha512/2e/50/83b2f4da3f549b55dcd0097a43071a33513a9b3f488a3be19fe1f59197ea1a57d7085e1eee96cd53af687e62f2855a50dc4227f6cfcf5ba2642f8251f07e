{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Button from \"react-native-web/dist/cjs/exports/Button\";\nimport Dimensions from \"react-native-web/dist/cjs/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/cjs/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nimport React from 'react';\n\nvar DimensionsExample = /*#__PURE__*/function (_React$Component) {\n  _inherits(DimensionsExample, _React$Component);\n\n  var _super = _createSuper(DimensionsExample);\n\n  function DimensionsExample() {\n    var _this;\n\n    _classCallCheck(this, DimensionsExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      listened: false,\n      logs: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle\", function () {\n      var listened = _this.state.listened;\n\n      if (listened) {\n        Dimensions.removeEventListener('change', _this._handleChange);\n\n        _this._log('Removed listener');\n      } else {\n        Dimensions.addEventListener('change', _this._handleChange);\n\n        _this._log('Added listener');\n      }\n\n      _this.setState(function () {\n        return {\n          listened: !listened\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleChange\", function (_ref) {\n      var window = _ref.window,\n          screen = _ref.screen;\n      window = JSON.stringify(window, null, 2);\n      screen = JSON.stringify(screen, null, 2);\n\n      _this._log(\"Changed\\nwindow = \".concat(window, \"\\nscreen = \").concat(screen));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_log\", function (msg) {\n      _this.setState(function (state) {\n        return {\n          logs: [\"\".concat(new Date().toTimeString(), \" - \").concat(msg)].concat(_toConsumableArray(state.logs))\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(DimensionsExample, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this._handleChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          logs = _this$state.logs,\n          listened = _this$state.listened;\n      var buttonTitle = listened ? 'Remove dimensions listener' : 'Add dimensions listener';\n      return /*#__PURE__*/_jsxs(View, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          onPress: this.toggle,\n          title: buttonTitle\n        }), /*#__PURE__*/_jsx(ScrollView, {\n          style: styles.logs,\n          children: logs.map(function (log, i) {\n            return /*#__PURE__*/_jsx(Text, {\n              style: styles.log,\n              children: log\n            }, i);\n          })\n        })]\n      });\n    }\n  }]);\n\n  return DimensionsExample;\n}(React.Component);\n\nexport default function DimensionsPage() {\n  return /*#__PURE__*/_jsx(DimensionsExample, {});\n}\nvar styles = StyleSheet.create({\n  logs: {\n    maxHeight: 256\n  },\n  log: {\n    fontFamily: 'monospace, monospace',\n    marginTop: 8,\n    marginBottom: 8\n  }\n});","map":null,"metadata":{},"sourceType":"module"}