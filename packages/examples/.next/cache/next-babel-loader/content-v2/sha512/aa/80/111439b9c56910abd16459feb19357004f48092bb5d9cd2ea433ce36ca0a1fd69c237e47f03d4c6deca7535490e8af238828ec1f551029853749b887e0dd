{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as helpers from '../helpers';\nimport sources from '../sources';\nimport React, { PureComponent } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/cjs/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/cjs/exports/Image\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\n\nclass NetworkImageExample extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      error: false,\n      loading: false\n    });\n\n    _defineProperty(this, \"_handleError\", e => {\n      const nextState = {\n        loading: false\n      };\n\n      if (this.props.logMethod === 'onError') {\n        nextState.message = `✘ onError ${JSON.stringify(e.nativeEvent)}`;\n      }\n\n      this.setState(() => nextState);\n    });\n\n    _defineProperty(this, \"_handleLoad\", () => {\n      const nextState = {\n        loading: false\n      };\n\n      if (this.props.logMethod === 'onLoad') {\n        nextState.message = '✔ onLoad';\n      }\n\n      this.setState(() => nextState);\n    });\n\n    _defineProperty(this, \"_handleLoadEnd\", () => {\n      const nextState = {\n        loading: false\n      };\n\n      if (this.props.logMethod === 'onLoadEnd') {\n        nextState.message = '✔ onLoadEnd';\n      }\n\n      this.setState(() => nextState);\n    });\n\n    _defineProperty(this, \"_handleLoadStart\", () => {\n      const nextState = {\n        loading: true\n      };\n\n      if (this.props.logMethod === 'onLoadStart') {\n        nextState.message = '✔ onLoadStart';\n      }\n\n      this.setState(() => nextState);\n    });\n  }\n\n  render() {\n    const loader = this.state.loading ? /*#__PURE__*/_jsx(View, {\n      children: /*#__PURE__*/_jsx(ActivityIndicator, {})\n    }) : null;\n    return /*#__PURE__*/_jsxs(View, {\n      children: [loader, /*#__PURE__*/_jsx(Image, {\n        defaultSource: sources.placeholder,\n        onError: this._handleError,\n        onLoad: this._handleLoad,\n        onLoadEnd: this._handleLoadEnd,\n        onLoadStart: this._handleLoadStart,\n        source: this.props.source,\n        style: helpers.styles.base\n      }), this.state.message && /*#__PURE__*/_jsx(Text, {\n        style: helpers.styles.marginTop,\n        children: this.state.message\n      })]\n    });\n  }\n\n}\n\n_defineProperty(NetworkImageExample, \"defaultProps\", {\n  logList: []\n});\n\nexport default NetworkImageExample;","map":null,"metadata":{},"sourceType":"module"}