{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/shared/PanResponderExample/examples/DraggableCircle.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PanResponder from \"react-native-web/dist/cjs/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nvar CIRCLE_SIZE = 80;\n\nvar DraggableCircle = /*#__PURE__*/function (_PureComponent) {\n  _inherits(DraggableCircle, _PureComponent);\n\n  var _super = _createSuper(DraggableCircle);\n\n  function DraggableCircle() {\n    var _this;\n\n    _classCallCheck(this, DraggableCircle);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"_panResponder\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_previousLeft\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_previousTop\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_circleStyles\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"circle\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_setCircleRef\", function (circle) {\n      _this.circle = circle;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleStartShouldSetPanResponder\", function (e, gestureState) {\n      // Should we become active when the user presses down on the circle?\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleMoveShouldSetPanResponder\", function (e, gestureState) {\n      // Should we become active when the user moves a touch over the circle?\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handlePanResponderGrant\", function (e, gestureState) {\n      _this._highlight();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handlePanResponderMove\", function (e, gestureState) {\n      _this._circleStyles.style.left = _this._previousLeft + gestureState.dx;\n      _this._circleStyles.style.top = _this._previousTop + gestureState.dy;\n\n      _this._updateNativeStyles();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handlePanResponderEnd\", function (e, gestureState) {\n      _this._unHighlight();\n\n      _this._previousLeft += gestureState.dx;\n      _this._previousTop += gestureState.dy;\n    });\n\n    _this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: _this._handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: _this._handleMoveShouldSetPanResponder,\n      onPanResponderGrant: _this._handlePanResponderGrant,\n      onPanResponderMove: _this._handlePanResponderMove,\n      onPanResponderRelease: _this._handlePanResponderEnd,\n      onPanResponderTerminate: _this._handlePanResponderEnd\n    });\n    _this._previousLeft = 20;\n    _this._previousTop = 84;\n    _this._circleStyles = {\n      style: {\n        left: _this._previousLeft,\n        top: _this._previousTop,\n        backgroundColor: 'green'\n      }\n    };\n    return _this;\n  }\n\n  _createClass(DraggableCircle, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._updateNativeStyles();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(View, {\n        style: styles.container,\n        children: /*#__PURE__*/_jsxDEV(View, _objectSpread({\n          ref: this._setCircleRef,\n          style: styles.circle\n        }, this._panResponder.panHandlers), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this);\n    }\n  }, {\n    key: \"_highlight\",\n    value: function _highlight() {\n      this._circleStyles.style.backgroundColor = 'blue';\n\n      this._updateNativeStyles();\n    }\n  }, {\n    key: \"_unHighlight\",\n    value: function _unHighlight() {\n      this._circleStyles.style.backgroundColor = 'green';\n\n      this._updateNativeStyles();\n    }\n  }, {\n    key: \"_updateNativeStyles\",\n    value: function _updateNativeStyles() {\n      this.circle && this.circle.setNativeProps(this._circleStyles);\n    }\n  }]);\n\n  return DraggableCircle;\n}(PureComponent);\n\nexport { DraggableCircle as default };\nvar styles = StyleSheet.create({\n  circle: {\n    width: CIRCLE_SIZE,\n    height: CIRCLE_SIZE,\n    borderRadius: CIRCLE_SIZE / 2,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    touchAction: 'none'\n  },\n  container: {\n    flex: 1,\n    minHeight: 400,\n    paddingTop: 64\n  }\n});","map":{"version":3,"sources":["/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/shared/PanResponderExample/examples/DraggableCircle.js"],"names":["React","PureComponent","CIRCLE_SIZE","DraggableCircle","circle","e","gestureState","_highlight","_circleStyles","style","left","_previousLeft","dx","top","_previousTop","dy","_updateNativeStyles","_unHighlight","_panResponder","PanResponder","create","onStartShouldSetPanResponder","_handleStartShouldSetPanResponder","onMoveShouldSetPanResponder","_handleMoveShouldSetPanResponder","onPanResponderGrant","_handlePanResponderGrant","onPanResponderMove","_handlePanResponderMove","onPanResponderRelease","_handlePanResponderEnd","onPanResponderTerminate","backgroundColor","styles","container","_setCircleRef","panHandlers","setNativeProps","StyleSheet","width","height","borderRadius","position","touchAction","flex","minHeight","paddingTop"],"mappings":"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","sourcesContent":["/**\n * @flow\n */\n\nimport React, { PureComponent } from 'react';\nimport { PanResponder, StyleSheet, View } from 'react-native';\n\nconst CIRCLE_SIZE = 80;\n\nexport default class DraggableCircle extends PureComponent {\n  _panResponder = {};\n  _previousLeft = 0;\n  _previousTop = 0;\n  _circleStyles = {};\n  circle = null;\n\n  constructor() {\n    super();\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminate: this._handlePanResponderEnd\n    });\n    this._previousLeft = 20;\n    this._previousTop = 84;\n    this._circleStyles = {\n      style: {\n        left: this._previousLeft,\n        top: this._previousTop,\n        backgroundColor: 'green'\n      }\n    };\n  }\n\n  componentDidMount() {\n    this._updateNativeStyles();\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View ref={this._setCircleRef} style={styles.circle} {...this._panResponder.panHandlers} />\n      </View>\n    );\n  }\n\n  _setCircleRef = circle => {\n    this.circle = circle;\n  };\n\n  _highlight() {\n    this._circleStyles.style.backgroundColor = 'blue';\n    this._updateNativeStyles();\n  }\n\n  _unHighlight() {\n    this._circleStyles.style.backgroundColor = 'green';\n    this._updateNativeStyles();\n  }\n\n  _updateNativeStyles() {\n    this.circle && this.circle.setNativeProps(this._circleStyles);\n  }\n\n  _handleStartShouldSetPanResponder = (e: Object, gestureState: Object): boolean => {\n    // Should we become active when the user presses down on the circle?\n    return true;\n  };\n\n  _handleMoveShouldSetPanResponder = (e: Object, gestureState: Object): boolean => {\n    // Should we become active when the user moves a touch over the circle?\n    return true;\n  };\n\n  _handlePanResponderGrant = (e: Object, gestureState: Object) => {\n    this._highlight();\n  };\n\n  _handlePanResponderMove = (e: Object, gestureState: Object) => {\n    this._circleStyles.style.left = this._previousLeft + gestureState.dx;\n    this._circleStyles.style.top = this._previousTop + gestureState.dy;\n    this._updateNativeStyles();\n  };\n\n  _handlePanResponderEnd = (e: Object, gestureState: Object) => {\n    this._unHighlight();\n    this._previousLeft += gestureState.dx;\n    this._previousTop += gestureState.dy;\n  };\n}\n\nconst styles = StyleSheet.create({\n  circle: {\n    width: CIRCLE_SIZE,\n    height: CIRCLE_SIZE,\n    borderRadius: CIRCLE_SIZE / 2,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    touchAction: 'none'\n  },\n  container: {\n    flex: 1,\n    minHeight: 400,\n    paddingTop: 64\n  }\n});\n"]},"metadata":{},"sourceType":"module"}