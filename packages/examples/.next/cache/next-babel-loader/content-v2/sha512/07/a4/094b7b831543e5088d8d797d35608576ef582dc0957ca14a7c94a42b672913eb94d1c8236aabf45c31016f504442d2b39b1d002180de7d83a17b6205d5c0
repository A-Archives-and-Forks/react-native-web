{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/shared/PanResponderExample/examples/DraggableCircle.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport PanResponder from \"react-native-web/dist/cjs/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nconst CIRCLE_SIZE = 80;\nexport default class DraggableCircle extends PureComponent {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_panResponder\", {});\n\n    _defineProperty(this, \"_previousLeft\", 0);\n\n    _defineProperty(this, \"_previousTop\", 0);\n\n    _defineProperty(this, \"_circleStyles\", {});\n\n    _defineProperty(this, \"circle\", null);\n\n    _defineProperty(this, \"_setCircleRef\", circle => {\n      this.circle = circle;\n    });\n\n    _defineProperty(this, \"_handleStartShouldSetPanResponder\", (e, gestureState) => {\n      // Should we become active when the user presses down on the circle?\n      return true;\n    });\n\n    _defineProperty(this, \"_handleMoveShouldSetPanResponder\", (e, gestureState) => {\n      // Should we become active when the user moves a touch over the circle?\n      return true;\n    });\n\n    _defineProperty(this, \"_handlePanResponderGrant\", (e, gestureState) => {\n      this._highlight();\n    });\n\n    _defineProperty(this, \"_handlePanResponderMove\", (e, gestureState) => {\n      this._circleStyles.style.left = this._previousLeft + gestureState.dx;\n      this._circleStyles.style.top = this._previousTop + gestureState.dy;\n\n      this._updateNativeStyles();\n    });\n\n    _defineProperty(this, \"_handlePanResponderEnd\", (e, gestureState) => {\n      this._unHighlight();\n\n      this._previousLeft += gestureState.dx;\n      this._previousTop += gestureState.dy;\n    });\n\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminate: this._handlePanResponderEnd\n    });\n    this._previousLeft = 20;\n    this._previousTop = 84;\n    this._circleStyles = {\n      style: {\n        left: this._previousLeft,\n        top: this._previousTop,\n        backgroundColor: 'green'\n      }\n    };\n  }\n\n  componentDidMount() {\n    this._updateNativeStyles();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(View, {\n      style: styles.container,\n      children: /*#__PURE__*/_jsxDEV(View, _objectSpread({\n        ref: this._setCircleRef,\n        style: styles.circle\n      }, this._panResponder.panHandlers), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  _highlight() {\n    this._circleStyles.style.backgroundColor = 'blue';\n\n    this._updateNativeStyles();\n  }\n\n  _unHighlight() {\n    this._circleStyles.style.backgroundColor = 'green';\n\n    this._updateNativeStyles();\n  }\n\n  _updateNativeStyles() {\n    this.circle && this.circle.setNativeProps(this._circleStyles);\n  }\n\n}\nconst styles = StyleSheet.create({\n  circle: {\n    width: CIRCLE_SIZE,\n    height: CIRCLE_SIZE,\n    borderRadius: CIRCLE_SIZE / 2,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    touchAction: 'none'\n  },\n  container: {\n    flex: 1,\n    minHeight: 400,\n    paddingTop: 64\n  }\n});","map":{"version":3,"sources":["/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/shared/PanResponderExample/examples/DraggableCircle.js"],"names":["React","PureComponent","CIRCLE_SIZE","DraggableCircle","constructor","circle","e","gestureState","_highlight","_circleStyles","style","left","_previousLeft","dx","top","_previousTop","dy","_updateNativeStyles","_unHighlight","_panResponder","PanResponder","create","onStartShouldSetPanResponder","_handleStartShouldSetPanResponder","onMoveShouldSetPanResponder","_handleMoveShouldSetPanResponder","onPanResponderGrant","_handlePanResponderGrant","onPanResponderMove","_handlePanResponderMove","onPanResponderRelease","_handlePanResponderEnd","onPanResponderTerminate","backgroundColor","componentDidMount","render","styles","container","_setCircleRef","panHandlers","setNativeProps","StyleSheet","width","height","borderRadius","position","touchAction","flex","minHeight","paddingTop"],"mappings":"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","sourcesContent":["/**\n * @flow\n */\n\nimport React, { PureComponent } from 'react';\nimport { PanResponder, StyleSheet, View } from 'react-native';\n\nconst CIRCLE_SIZE = 80;\n\nexport default class DraggableCircle extends PureComponent {\n  _panResponder = {};\n  _previousLeft = 0;\n  _previousTop = 0;\n  _circleStyles = {};\n  circle = null;\n\n  constructor() {\n    super();\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,\n      onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminate: this._handlePanResponderEnd\n    });\n    this._previousLeft = 20;\n    this._previousTop = 84;\n    this._circleStyles = {\n      style: {\n        left: this._previousLeft,\n        top: this._previousTop,\n        backgroundColor: 'green'\n      }\n    };\n  }\n\n  componentDidMount() {\n    this._updateNativeStyles();\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View ref={this._setCircleRef} style={styles.circle} {...this._panResponder.panHandlers} />\n      </View>\n    );\n  }\n\n  _setCircleRef = circle => {\n    this.circle = circle;\n  };\n\n  _highlight() {\n    this._circleStyles.style.backgroundColor = 'blue';\n    this._updateNativeStyles();\n  }\n\n  _unHighlight() {\n    this._circleStyles.style.backgroundColor = 'green';\n    this._updateNativeStyles();\n  }\n\n  _updateNativeStyles() {\n    this.circle && this.circle.setNativeProps(this._circleStyles);\n  }\n\n  _handleStartShouldSetPanResponder = (e: Object, gestureState: Object): boolean => {\n    // Should we become active when the user presses down on the circle?\n    return true;\n  };\n\n  _handleMoveShouldSetPanResponder = (e: Object, gestureState: Object): boolean => {\n    // Should we become active when the user moves a touch over the circle?\n    return true;\n  };\n\n  _handlePanResponderGrant = (e: Object, gestureState: Object) => {\n    this._highlight();\n  };\n\n  _handlePanResponderMove = (e: Object, gestureState: Object) => {\n    this._circleStyles.style.left = this._previousLeft + gestureState.dx;\n    this._circleStyles.style.top = this._previousTop + gestureState.dy;\n    this._updateNativeStyles();\n  };\n\n  _handlePanResponderEnd = (e: Object, gestureState: Object) => {\n    this._unHighlight();\n    this._previousLeft += gestureState.dx;\n    this._previousTop += gestureState.dy;\n  };\n}\n\nconst styles = StyleSheet.create({\n  circle: {\n    width: CIRCLE_SIZE,\n    height: CIRCLE_SIZE,\n    borderRadius: CIRCLE_SIZE / 2,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    touchAction: 'none'\n  },\n  container: {\n    flex: 1,\n    minHeight: 400,\n    paddingTop: 64\n  }\n});\n"]},"metadata":{},"sourceType":"module"}