{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable react/jsx-no-bind */\nimport React from 'react';\nimport { styles as helperStyles } from '../helpers';\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport TextInput from \"react-native-web/dist/cjs/exports/TextInput\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\n\nvar TextEventsExample = /*#__PURE__*/function (_React$Component) {\n  _inherits(TextEventsExample, _React$Component);\n\n  var _super = _createSuper(TextEventsExample);\n\n  function TextEventsExample() {\n    var _this;\n\n    _classCallCheck(this, TextEventsExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      curText: '<No Event>',\n      prevText: '<No Event>',\n      prev2Text: '<No Event>',\n      prev3Text: '<No Event>'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateText\", function (text) {\n      _this.setState(function (state) {\n        return {\n          curText: text,\n          prevText: state.curText,\n          prev2Text: state.prevText,\n          prev3Text: state.prev2Text\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TextEventsExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxs(View, {\n        children: [/*#__PURE__*/_jsx(TextInput, {\n          autoCapitalize: \"none\",\n          autoCorrect: false,\n          onBlur: function onBlur() {\n            return _this2.updateText('onBlur');\n          },\n          onChange: function onChange(event) {\n            return _this2.updateText('onChange text: ' + event.nativeEvent.text);\n          },\n          onEndEditing: function onEndEditing(event) {\n            return _this2.updateText('onEndEditing text: ' + event.nativeEvent.text);\n          },\n          onFocus: function onFocus() {\n            return _this2.updateText('onFocus');\n          },\n          onKeyPress: function onKeyPress(event) {\n            _this2.updateText('onKeyPress key: ' + event.nativeEvent.key);\n          },\n          onSelectionChange: function onSelectionChange(event) {\n            return _this2.updateText('onSelectionChange range: ' + event.nativeEvent.selection.start + ',' + event.nativeEvent.selection.end);\n          },\n          onSubmitEditing: function onSubmitEditing(event) {\n            return _this2.updateText('onSubmitEditing text: ' + event.nativeEvent.text);\n          },\n          placeholder: \"Enter text to see events\",\n          style: [helperStyles.textinput, {\n            maxWidth: 200\n          }]\n        }), /*#__PURE__*/_jsxs(Text, {\n          style: styles.eventLabel,\n          children: [this.state.curText, '\\n', \"(prev: \", this.state.prevText, \")\", '\\n', \"(prev2: \", this.state.prev2Text, \")\", '\\n', \"(prev3: \", this.state.prev3Text, \")\"]\n        })]\n      });\n    }\n  }]);\n\n  return TextEventsExample;\n}(React.Component);\n\nexport { TextEventsExample as default };\nvar styles = StyleSheet.create({\n  eventLabel: {\n    margin: 3,\n    fontSize: 12\n  }\n});","map":null,"metadata":{},"sourceType":"module"}