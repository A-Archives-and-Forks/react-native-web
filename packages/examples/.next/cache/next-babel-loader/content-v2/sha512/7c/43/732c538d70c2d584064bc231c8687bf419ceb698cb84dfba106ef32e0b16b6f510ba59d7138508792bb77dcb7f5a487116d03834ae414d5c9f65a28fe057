{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/jsx-no-bind */\nimport React from 'react';\nimport { styles as helperStyles } from '../helpers';\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport TextInput from \"react-native-web/dist/cjs/exports/TextInput\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nexport default class TextEventsExample extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      curText: '<No Event>',\n      prevText: '<No Event>',\n      prev2Text: '<No Event>',\n      prev3Text: '<No Event>'\n    });\n\n    _defineProperty(this, \"updateText\", text => {\n      this.setState(state => {\n        return {\n          curText: text,\n          prevText: state.curText,\n          prev2Text: state.prevText,\n          prev3Text: state.prev2Text\n        };\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(View, {\n      children: [/*#__PURE__*/_jsx(TextInput, {\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        onBlur: () => this.updateText('onBlur'),\n        onChange: event => this.updateText('onChange text: ' + event.nativeEvent.text),\n        onEndEditing: event => this.updateText('onEndEditing text: ' + event.nativeEvent.text),\n        onFocus: () => this.updateText('onFocus'),\n        onKeyPress: event => {\n          this.updateText('onKeyPress key: ' + event.nativeEvent.key);\n        },\n        onSelectionChange: event => this.updateText('onSelectionChange range: ' + event.nativeEvent.selection.start + ',' + event.nativeEvent.selection.end),\n        onSubmitEditing: event => this.updateText('onSubmitEditing text: ' + event.nativeEvent.text),\n        placeholder: \"Enter text to see events\",\n        style: [helperStyles.textinput, {\n          maxWidth: 200\n        }]\n      }), /*#__PURE__*/_jsxs(Text, {\n        style: styles.eventLabel,\n        children: [this.state.curText, '\\n', \"(prev: \", this.state.prevText, \")\", '\\n', \"(prev2: \", this.state.prev2Text, \")\", '\\n', \"(prev3: \", this.state.prev3Text, \")\"]\n      })]\n    });\n  }\n\n}\nconst styles = StyleSheet.create({\n  eventLabel: {\n    margin: 3,\n    fontSize: 12\n  }\n});","map":null,"metadata":{},"sourceType":"module"}