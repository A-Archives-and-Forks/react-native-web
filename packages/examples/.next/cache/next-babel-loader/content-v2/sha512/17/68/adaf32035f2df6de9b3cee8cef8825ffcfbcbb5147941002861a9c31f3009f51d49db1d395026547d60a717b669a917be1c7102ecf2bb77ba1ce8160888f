{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/text/examples/OnPress.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/cjs/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/cjs/exports/Text\";\nimport View from \"react-native-web/dist/cjs/exports/View\";\nexport default function OnPress() {\n  _s();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      count = _React$useState2[0],\n      updateCount = _React$useState2[1];\n\n  var textLog = '';\n\n  if (count > 1) {\n    textLog = count + 'x text onPress';\n  } else if (count > 0) {\n    textLog = 'text onPress';\n  }\n\n  return /*#__PURE__*/_jsxDEV(View, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      onPress: function onPress() {\n        updateCount(function (count) {\n          return count + 1;\n        });\n      },\n      style: styles.textBlock,\n      children: \"Text has built-in onPress handling\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(View, {\n      style: styles.logBox,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: textLog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OnPress, \"DIkCHZzzlG3chD1WwCcXkx79xYE=\");\n\n_c = OnPress;\nvar styles = StyleSheet.create({\n  logBox: {\n    padding: 20,\n    marginTop: 10,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  },\n  textBlock: {\n    fontWeight: '500',\n    color: 'blue'\n  }\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"OnPress\");","map":{"version":3,"sources":["/Users/necolas/OpenSource/github/necolas/react-native-web/packages/examples/pages/text/examples/OnPress.js"],"names":["React","OnPress","useState","count","updateCount","textLog","styles","textBlock","logBox","StyleSheet","create","padding","marginTop","borderWidth","hairlineWidth","borderColor","backgroundColor","fontWeight","color"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAGA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAAA,wBACHD,KAAK,CAACE,QAAN,CAAe,CAAf,CADG;AAAA;AAAA,MACzBC,KADyB;AAAA,MAClBC,WADkB;;AAGhC,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIF,KAAK,GAAG,CAAZ,EAAe;AACbE,IAAAA,OAAO,GAAGF,KAAK,GAAG,gBAAlB;AACD,GAFD,MAEO,IAAIA,KAAK,GAAG,CAAZ,EAAe;AACpBE,IAAAA,OAAO,GAAG,cAAV;AACD;;AAED,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,OAAO,EAAE,mBAAM;AACbD,QAAAA,WAAW,CAAC,UAAAD,KAAK;AAAA,iBAAIA,KAAK,GAAG,CAAZ;AAAA,SAAN,CAAX;AACD,OAHH;AAIE,MAAA,KAAK,EAAEG,MAAM,CAACC,SAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACE,MAApB;AAAA,6BACE,QAAC,IAAD;AAAA,kBAAOH;AAAP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAzBuBJ,O;;KAAAA,O;AA2BxB,IAAMK,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,MAAM,EAAE;AACNG,IAAAA,OAAO,EAAE,EADH;AAENC,IAAAA,SAAS,EAAE,EAFL;AAGNC,IAAAA,WAAW,EAAEJ,UAAU,CAACK,aAHlB;AAINC,IAAAA,WAAW,EAAE,SAJP;AAKNC,IAAAA,eAAe,EAAE;AALX,GADuB;AAQ/BT,EAAAA,SAAS,EAAE;AACTU,IAAAA,UAAU,EAAE,KADH;AAETC,IAAAA,KAAK,EAAE;AAFE;AARoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function OnPress() {\n  const [count, updateCount] = React.useState(0);\n\n  let textLog = '';\n  if (count > 1) {\n    textLog = count + 'x text onPress';\n  } else if (count > 0) {\n    textLog = 'text onPress';\n  }\n\n  return (\n    <View>\n      <Text\n        onPress={() => {\n          updateCount(count => count + 1);\n        }}\n        style={styles.textBlock}\n      >\n        Text has built-in onPress handling\n      </Text>\n      <View style={styles.logBox}>\n        <Text>{textLog}</Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  logBox: {\n    padding: 20,\n    marginTop: 10,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9'\n  },\n  textBlock: {\n    fontWeight: '500',\n    color: 'blue'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}